// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
//         Giovanni Campagna <gcampagn@cs.stanford.edu>

import { Ast, Type } from 'thingtalk';

import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';

for (const qualifier of $loader.qualifiers) {
    if (qualifier.pslot.type === Type.Date) {
        time_qualifier : C.FilterSlot = {
            'in' range:constant_date_range => C.makeWikidataTimeFilter(qualifier, '==', range);
            ('before'|'earlier than') date:constant_date_edge => C.makeWikidataTimeFilter(qualifier, '<=', [date]); 
            ('after'|'later than') date:constant_date_edge => C.makeWikidataTimeFilter(qualifier, '>=', [date]);    
        } 
    }
}

qualified_with_filter : C.FilterSlot = {
    filter:with_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_npp_filter : C.FilterSlot = {
    filter:npp_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_npp_filter : C.FilterSlot = {
    filter:npp_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_npi_filter : C.FilterSlot = {
    filter:npi_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_avp_filter : C.FilterSlot = {
    filter:avp_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_pvp_filter : C.FilterSlot = {
    filter:pvp_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_npv_filter : C.FilterSlot = {
    filter:npv_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_apv_filter : C.FilterSlot = {
    filter:apv_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_reverse_verb_filter : C.FilterSlot = {
    filter:reverse_verb_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

qualified_preposition_filter : C.FilterSlot = {
    filter:preposition_filter qualifier:time_qualifier with { type = filter.type }
    => C.makeQualifiedFilter(filter, qualifier);
}

one_with_filter_table : Ast.Expression = {
    !nofilter {
        ( table:complete_table ('with' | 'having') filter:qualified_with_filter with { functionName = table.functionName }
        | table:complete_table ('with' | 'having') filter:qualified_npp_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);
    }
}

one_which_filter_table : Ast.Expression = {
    !nofilter {
        ( table:complete_table ('which' | 'that') ('is' | 'are') filter:qualified_npi_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') filter:qualified_avp_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') ('is' | 'are') filter:qualified_apv_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') ('is' | 'are') filter:qualified_npv_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') 'have' filter:qualified_npp_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') 'have' filter:qualified_with_filter with { functionName = table.functionName }
        | table:complete_table ('which' | 'that') filter:qualified_reverse_verb_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);
    }
}

one_clean_filter_table : Ast.Expression = {
    !nofilter {
        ( filter:qualified_apv_filter table:complete_table with { functionName = filter.functionName }
        | table:complete_table filter:qualified_pvp_filter with { functionName = table.functionName }
        | table:complete_table filter:qualified_preposition_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);
    }
}

two_with_filter_table : Ast.Expression = {
    !nofilter {
        ( table:one_with_filter_table 'and' filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') ('and having' | 'and with' | ', with' | 'and have') filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('with' | 'having' | 'that have') filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_with_filter_table 'and' filter:qualified_npp_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') ('and having' | 'and with' | ', with' | 'and have') filter:qualified_npp_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('with' | 'having' | 'that have') filter:qualified_npp_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);
    }

    !nofilter filter:qualified_apv_filter table:one_with_filter_table with { functionName = filter.functionName } => C.addFilter($loader, table, filter);
}

two_which_filter_table : Ast.Expression = {
    !nofilter {
        ( table:one_with_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_npi_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') filter:qualified_avp_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_apv_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_npv_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') 'have' filter:qualified_npp_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') 'have' filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_with_filter_table ('' | ',') ('which' | 'that') filter:qualified_reverse_verb_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);

        ( table:one_which_filter_table ('' | ',') 'and' ('is' | 'are') filter:qualified_npi_filter with { functionName = table.functionName }
        | table:one_which_filter_table 'and' filter:qualified_avp_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') 'and' ('is' | 'are') filter:qualified_apv_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') 'and' ('is' | 'are') filter:qualified_npv_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') 'and' 'have' filter:qualified_npp_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') 'and' 'have' filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_which_filter_table ('' | ',') 'and' filter:qualified_reverse_verb_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);

        ( table:one_clean_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_npi_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') filter:qualified_avp_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_apv_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') ('is' | 'are') filter:qualified_npv_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') 'have' filter:qualified_npp_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') 'have' filter:qualified_with_filter with { functionName = table.functionName }
        | table:one_clean_filter_table ('' | ',') ('which' | 'that') filter:qualified_reverse_verb_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);

        !nofilter filter:qualified_apv_filter table:one_which_filter_table with { functionName = filter.functionName } => C.addFilter($loader, table, filter);
    }
}

two_clean_filter_table : Ast.Expression = {
    !nofilter {
        ( filter:qualified_apv_filter table:one_clean_filter_table with { functionName = filter.functionName }
        | table:one_clean_filter_table filter:qualified_pvp_filter with { functionName = table.functionName }
        | table:one_clean_filter_table filter:qualified_preposition_filter with { functionName = table.functionName }
        ) => C.addFilter($loader, table, filter);
    }
}