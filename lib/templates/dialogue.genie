// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

import { Ast, } from 'thingtalk';

import * as C from './ast_manip';
import * as S from './state_manip';
import * as D from './dialogue_acts';
import ThingpediaLoader from './load-thingpedia';

// Declare key functions for contextual stuff
keyfn = {
    S.ContextInfo : S.contextKeyFn,
    S.NameList : S.nameListKeyFn,
    S.ContextName : S.contextNameKeyFn,
    D.ActionSuccessPhraseWithResult : D.actionSuccessPhraseWithResultKeyFn,
    D.Recommendation : D.recommendationKeyFn,
    D.ListProposal : D.listProposalKeyFn,
    D.ResultPhrase : D.resultPhraseKeyFn,
    D.DirectAnswerPhrase : D.directAnswerPhraseKeyFn,
    D.UserSearchQuestionForList : D.userSearchQuestionForListKeyFn,
    D.PreciseSearchQuestionAnswer : D.preciseSearchQuestionAnswerKeyFn,
    D.NegativeProposalReply : D.negativeProposalReplyKeyFn,
}

// basic ThingTalk functionality
import './shared.genie';
import './constants.genie';
import './timers.genie';
import './filters.genie';
import './projections.genie';
import './aggregation.genie';
import './computation.genie';
import './who_questions.genie';
import './stream_tables.genie';
import './commands.genie';

// common dialogue elements
import './dlg/shared.genie';
import './dlg/results.genie';

// specific interactions
// keep this in alphabetical order
import './dlg/action-confirm.genie';
import './dlg/action-results.genie';
import './dlg/aggregation-results.genie';
import './dlg/empty-search.genie';
import './dlg/initial-request.genie';
import './dlg/list-proposal.genie';
import './dlg/recommendation.genie';
import './dlg/slot-fill.genie';
import './dlg/streams.genie';

// declare contexts
context : S.ContextInfo = {
    // context tags applied to both agent and user contexts
    // these should be returned by S.getContextTags()
    ctx_init,
    ctx_multidomain,
    ctx_with_result,
    ctx_with_table_result,
    ctx_with_aggregation_result,
    ctx_with_action,
    ctx_without_action,
    ctx_with_result_and_action,
    ctx_with_result_question,
    ctx_with_result_noquestion,
    ctx_with_result_argminmax,
    ctx_without_projection,
    ctx_with_notification,
    ctx_for_related_question,
    ctx_with_missing_projection,

    // phrases that describe the current context
    // (some are later because they use a different type)
    ctx_next_statement,
    ctx_current_statement,

    // abstract result states (used to interpret user utterances)
    // these should be returned by S.tagContextForAgent()
    ctx_greet,
    ctx_reinit,
    ctx_cancel,
    ctx_end,
    ctx_search_command,
    ctx_aggregation_question,
    ctx_distance_argminmax_question,
    ctx_argminmax_question,
    ctx_one_result_question,
    ctx_empty_direct_question,
    ctx_empty_search_command,
    ctx_large_search_command,
    ctx_single_result_search_command,
    ctx_complete_search_command,
    ctx_completed_action_success,
    ctx_completed_action_error,
    ctx_confirm_action,
    ctx_incomplete_action,
    ctx_incomplete_action_after_search,
    ctx_learn_more,
    ctx_display_nonlist_result,
    ctx_rule_enable_success,
    ctx_action_notification,
    ctx_list_notification,
    ctx_nonlist_notification,
    ctx_notification_error,

    // agent states (used to continue the conversation with more user utterances)
    // these more or less map to the agent dialogue acts, except we don't distinguish
    // acts with questions and acts without questions (the distinction is there only
    // for the purposes of type-checking)
    ctx_sys_any,

    ctx_sys_action_success,
    ctx_sys_action_error,
    ctx_sys_anything_else,
    ctx_sys_confirm_action,
    ctx_sys_display_result,
    ctx_sys_empty_search,
    ctx_sys_end,
    ctx_sys_greet,
    ctx_sys_learn_more_what,
    ctx_sys_propose_refined_query,
    ctx_sys_recommend_many,
    ctx_sys_recommend_one,
    ctx_sys_search_question,
    ctx_sys_slot_fill
};
context : Ast.Expression = {
    ctx_current_query
};
context : SlotBag = {
    ctx_thingpedia_result,
    ctx_thingpedia_empty_result
};
context : D.ThingpediaListProposal = {
    ctx_thingpedia_list_result
};
context : C.ErrorMessage = {
    ctx_thingpedia_error_message
};
context : S.NameList = {
    ctx_result_name_list
};
context : S.ContextName = {
    ctx_result_name
};
context : Ast.Value = {
    ctx_notification_app_name
};

initial_request_preamble : S.ContextInfo = {
    ["{hello|hi}! i can help you {find a ${table[plural=one]}|{find|search for} ${table[plural=other]}}.", priority=10]: (ctx : ctx_init, table : base_table<functionName = ctx.nextFunction>) => ctx,

    ["{hello|hi}! i can help you ${action}.", priority=10]: (ctx : ctx_init, action : complete_action<functionName = ctx.nextFunction>) => {
        const invocation = C.getInvocation(action);
        if (invocation.in_params.length > 0)
            return null;
        return ctx;
    },
}

/**
 * The root of the agent generation.
 *
 * This non-terminal contains the entire reply of the agent.
 */
$agent : S.AgentReplyRecord = {
    ( ctx:ctx_greet ('hello' | 'hi') ('!' | ',') ('how can i help you' | 'what are you interested in' | 'what can i do for you') '?'
    | ctx:ctx_init ('hello' | 'hi') ('!' | ',') ('how can i help you' | 'what are you interested in' | 'what can i do for you') '?'
    | ctx:ctx_reinit ('how can i help you' | 'what are you interested in' | 'what can i do for you') '?'
    ) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_greet', null), null, null),

    ctx:ctx_cancel 'alright, let me know if I can help you with anything else!'
        => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_end', null)),

    // action results
    action_success_phrase;
    ctx:ctx_completed_action_error sorry_preamble phrase:action_error_phrase => phrase;

    // query results
    ctx:ctx_display_nonlist_result proposal:system_nonlist_result
        => D.makeDisplayResultReply(ctx, proposal);
    ctx:ctx_display_nonlist_result proposal:system_list_proposal
        => D.makeDisplayResultReplyFromList(ctx, proposal);

    // aggregation results
    ( ctx:ctx_aggregation_question reply:count_aggregation_reply
    | ctx:ctx_aggregation_question reply:other_aggregation_reply
    ) => reply;

    // confirming an action
    ctx:ctx_confirm_action reply:action_confirm_phrase => reply;

    // empty search error
    ctx:ctx_empty_search_command error:empty_search_error
        => D.makeEmptySearchError(ctx, error);

    // slot filling of actions
    ctx:ctx_incomplete_action_after_search questions:slot_fill_question
        => D.makeSlotFillQuestion(ctx, questions);

    ctx:ctx_incomplete_action_after_search initial_request_preamble questions:slot_fill_question
        => D.makeSlotFillQuestion(ctx, questions);

    // action recommendation (through one or a list)

    ctx:ctx_complete_search_command proposal:system_recommendation
        => D.makeRecommendationReply(ctx, proposal);

    ctx:ctx_complete_search_command proposal:system_list_proposal [weight=10]
        => D.makeListProposalReply(ctx, proposal);

    ctx:ctx_with_missing_projection "sorry, I don't have that information at the moment"
        => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_recommend_one', null));

    // learn more
    ctx:ctx_learn_more system_learn_more
        => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_learn_more_what', null), null, null, { end: false });

    ["${preamble} I {will|am going to} ${stmt}"]: (ctx : ctx_rule_enable_success, preamble : generic_excitement2_phrase, stmt : ctx_current_statement)
        => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_rule_enable_success', null));

    // notification
    ctx:ctx_list_notification notification_preamble proposal:system_recommendation
        => D.makeRecommendationReply(ctx, proposal);
    ctx:ctx_nonlist_notification notification_preamble proposal:system_nonlist_result
        => D.makeDisplayResultReply(ctx, proposal);
    action_notification_phrase;
    ctx:ctx_notification_error notification_error_preamble phrase:action_error_phrase => phrase;
}

/**
 * The root of the user generation.
 *
 * This non-terminal contains a single user turn in its entirety.
 */
$user : Ast.DialogueState = {
    ctx:ctx_init greeting [weight=0.01, expandchoice=false]
        => S.makeSimpleState(ctx, 'greet', null);
    ( ctx:ctx_init stmt:initial_command [weight=0.5]
    | ctx:ctx_init greeting stmt:initial_command [weight=0.5]
    | ctx:ctx_sys_greet stmt:initial_command
    ) => D.startNewRequest($loader, ctx, stmt);

    // do you need anything else?
    ( ctx:ctx_sys_anything_else no_thanks_phrase ('goodbye !' | '') [weight=0.01]
    | ctx:ctx_sys_anything_else thanks_phrase ('goodbye !' | '') [weight=0.01]
    ) => S.makeSimpleState(ctx, 'end', null);

    ( ctx:ctx_sys_anything_else stmt:initial_command
    | ctx:ctx_sys_anything_else yes_please_phrase stmt:initial_command
    ) => D.startNewRequest($loader, ctx, stmt);

    ctx:ctx_sys_anything_else yes_please_phrase
        => S.makeSimpleState(ctx, 'reinit', null);

    // action confirmations
    ctx:ctx_sys_confirm_action accept_phrase [weight=0.9]
        => D.actionConfirmAcceptPhrase(ctx);
    ctx:ctx_sys_confirm_action reject_phrase [weight=0.1]
        => D.actionConfirmRejectPhrase(ctx);

    // action and non-list query results
    ( ctx:ctx_sys_action_success thanks_phrase ('goodbye !' | '')
    | ctx:ctx_sys_display_result thanks_phrase ('goodbye !' | '')
    ) => S.makeSimpleState(ctx, 'cancel', null);

    ( ctx:ctx_sys_display_result repeat_command_phrase
    | ctx:ctx_sys_action_error repeat_command_on_error_phrase
    ) => D.repeatCommandReply(ctx);

    // restarting

    ( ctx:ctx_sys_action_success stmt:initial_command
    | ctx:ctx_sys_action_success yes_please_phrase stmt:initial_command
    | ctx:ctx_sys_display_result stmt:initial_command
    | ctx:ctx_sys_display_result yes_please_phrase stmt:initial_command
    ) => D.startNewRequest($loader, ctx, stmt);

    !multiwoz {
        ( ctx:ctx_sys_recommend_one stmt:initial_command
        | ctx:ctx_sys_action_error stmt:initial_command
        | ctx:ctx_sys_recommend_many stmt:initial_command
        ) => D.startNewRequest($loader, ctx, stmt);
    }

    // cancelling

    ( ctx:ctx_sys_action_error no_thanks_phrase
    | ctx:ctx_sys_action_error nevermind_phrase
    ) => S.makeSimpleState(ctx, 'cancel', null);

    // slot fill questions
    ctx:ctx_sys_slot_fill answer:imprecise_slot_fill_answer
        => D.impreciseSlotFillAnswer(ctx, answer);
}
