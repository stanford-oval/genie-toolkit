// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// List proposal templates: the search is complete (1-3 search results), and the
// agent reads out the search results, optionally proposing an action to do on them

// A list proposal from the system is followed by:
// - choosing an element from the list (= "positive_list_proposal_reply_pair")
// - some form of search refinement (= "negative_list_proposa_reply_pair")
// - a question about an element of the list (= "list_proposal_search_question_pair")

import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';

// a "list proposal" consists of the first few results of the current query,
// together with informative results about them, an offer to learn more, or an offer for an action

system_list_proposal : D.ListProposal = {
    ["{i see|i have|i have found} ${name_list}."]: (name_list : ctx_result_name_list)
        => D.checkListProposal(name_list, null, false);

    // simple case: all N results share some property
    ["{i see|i have|i have found} ${name_list}. ${name_list.length:select:=2{both|they|all of them}_{they|all of them}} are ${info[plural=other]}.", priority=5]: (name_list : ctx_result_name_list, info : result_info_phrase)
        => D.checkListProposal(name_list, info.info, false);

    proposal:ctx_thingpedia_list_result [priority=20]
        => D.checkThingpediaListProposal(proposal, null);
    ["${proposal}. {they|all of them} are ${info[plural=other]}.", priority=11]: (proposal : ctx_thingpedia_list_result, info : result_info_phrase)
        => D.checkThingpediaListProposal(proposal, info.info);

    // hard case: not all results share the same property, so we talk about each result
    // individually
    // this is a fairly slow template so it's only enabled at inference time
    ["{i see|i have|i have found} ${name_list}. ${description}.", priority=0.5]: (name_list: ctx_result_name_list, description:concat_list_description<length=name_list.length>)
        => description,

    // long-form answers to a single question
    ["${name_list.length:select:=2{both ${name_list} are|${name_list} are both|${name_list} are all}_{${name_list} are all}} ${info[plural=other]}.", priority=10]: (ctx: ctx_with_result_question, name_list : ctx_result_name_list, info : result_info_phrase)
        => D.checkListProposal(name_list, info.info, false),

    ["${description}", priority=4]: (ctx: ctx_with_result_question, description:concat_list_description)
        => description,
}

// describe each element individually
concat_list_description : D.ListProposal = {
    ["${p1}, {while|whereas|and} ${p2}."]: (p1:direct_answer_phrase_0, p2:direct_answer_phrase_1)
        => D.makeListProposalFromDirectAnswers(p1, p2),

    ["${p1}, ${p2}, {and|while|whereas} ${p3}.", priority=1]: (p1:direct_answer_phrase_0, p2:direct_answer_phrase_1, p3:direct_answer_phrase_2)
        => D.makeListProposalFromDirectAnswers(p1, p2, p3),
}
