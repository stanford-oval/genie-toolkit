// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Recommendation templates: the agent reads out or describe the top result from the search,
// optionally proposing an action to do on it

// A recommendation from the system is followed by:
// - yes (= "positive_recommendation_reply_pair")
// - some form of search refinement (= "negative_recommendation_reply_pair")
// - a question (= "recommendation_search_question_pair")
// - closing the dialogue (= "recommendation_cancel_pair")

import { Ast, } from 'thingtalk';

import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';

import { SlotBag } from '../slot_bag';

actionable_system_recommendation_short : D.Recommendation = {
    ctx:ctx_with_result_noquestion proposal:ctx_thingpedia_result [priority=2]
        => D.makeThingpediaRecommendation(ctx, proposal);
    ctx:ctx_with_result_noquestion proposal:ctx_thingpedia_result [priority=2]
        => D.makeThingpediaRecommendation(ctx, proposal);

    ["i {recommend|suggest} ${proposal}"]: (ctx : ctx_with_result_and_action, proposal : constant_name<value=ctx.id0>)
        => D.makeRecommendation(ctx, proposal),
    ["{i see|i have|i have found|i have one, it is} ${proposal}"]: (ctx : ctx_with_result_noquestion, proposal : constant_name<value=ctx.id0>)
        => D.makeRecommendation(ctx, proposal),
    ["the answer is ${proposal}"]: (ctx : ctx_with_result_argminmax, proposal : constant_name<value = ctx.id0>)
        => D.makeRecommendation(ctx, proposal);

    ["the ${base[plural=one]} with the highest ${param} is ${proposal}", priority=1]: (ctx:ctx_with_result_argminmax, base:base_table<functionName = ctx.currentFunction>, param:out_param_Any<functionName = ctx.currentFunction>, proposal:constant_name<value = ctx.id0>)
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'desc');
    ["the ${base[plural=one]} with the lowest ${param} is ${proposal}", priority=1]: (ctx:ctx_with_result_argminmax, base:base_table<functionName = ctx.currentFunction>, param:out_param_Any<functionName = ctx.currentFunction>, proposal:constant_name<value = ctx.id0>)
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'asc');

    ["the ${argminmax} ${base[plural=one]} is ${proposal}", priority=2]: (ctx:ctx_with_result_argminmax, argminmax:apv_argminmax<functionName = ctx.currentFunction>, base:base_table<functionName = ctx.currentFunction>, proposal:constant_name<value = ctx.id0>)
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, argminmax[0], argminmax[1]);
}

// note: most of the following combine non-terminals that are already depending
// on the context, so we don't need an additional constraint here

direct_user_question_answer : D.Recommendation = {
    res:direct_result_info_phrase
        => D.makeThingpediaRecommendation(res.ctx, res.info);
}

actionable_system_display_result_short : D.Recommendation = {
    ctx:ctx_with_result info:ctx_thingpedia_result '.' [priority=5]
        => D.makeDisplayResult(ctx, info);
}

// a non-list result
system_nonlist_result : D.Recommendation = {
    phrase:actionable_system_display_result_short
         => D.checkDisplayResult(phrase);

    ctx:ctx_with_result_noquestion res:direct_result_info_phrase
        => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info));
    ctx:ctx_with_result_question res:direct_result_info_phrase [priority=10]
        => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info));
    phrase:actionable_system_display_result_short extra:direct_result_info_phrase
        => D.checkDisplayResult(D.combineDisplayResult(phrase, extra.info));
}

// a recommendation consists of the first result of the current query,
// and action to do with it
// the action can come from the context (if the user expressed it earlier), or it can
// be offered immediately
system_recommendation : D.Recommendation = {
    ["${proposal}."]: (ctx_with_action, proposal:actionable_system_recommendation_short)
        => D.checkRecommendation(proposal, null),

    // recommendations after a search
    // with additional info
    ["{${proposal}. it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}.}"]: (proposal:actionable_system_recommendation_short, res:result_info_phrase)
        => D.checkRecommendation(proposal, res.info),

    // recommendations after a search
    // no additional info
    ["${proposal}."]: (proposal:actionable_system_recommendation_short)
        => D.checkRecommendation(proposal, null),

    // long-form answers to a single question
    ["${proposal}."]: (ctx : ctx_with_result_question, proposal:direct_answer_phrase<index=0>) => {
        const rec = D.makeRecommendation(proposal.result.ctx, proposal.name);
        if (!rec)
            return null;
        return D.checkRecommendation(rec, proposal.result.info);
    },

    // short answers to single questions
    proposal:direct_user_question_answer => D.checkRecommendation(proposal, null),
}
