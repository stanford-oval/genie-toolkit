// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates that describe results from a query

import assert from 'assert';
import { Ast, } from 'thingtalk';

import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import { SlotBag } from '../slot_bag';
import ThingpediaLoader from '../load-thingpedia';

// a phrase that talks about the result by name
direct_answer_phrase : D.DirectAnswerPhrase = {
    ["${name} is a ${info[plural=one]}"]: (name: ctx_result_name, info: result_info_phrase)
        => D.checkDirectAnswerPhrase(info, name.name),

    // short answers to a single question
    ["${name} ${filter[plural=one]}", priority=1.1]: (name: ctx_result_name, filter:avp_filter<functionName = name.currentFunction>)
        => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter),
    ["${name} is ${filter[plural=one]}", priority=1.1]: (name: ctx_result_name, filter:pvp_filter<functionName = name.currentFunction>)
        => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter),
    ["${name} is ${filter[plural=one]}", priority=1]: (name: ctx_result_name, filter:preposition_filter<functionName = name.currentFunction>)
        => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter),
    ["${name} is ${filter[plural=one]}", priority=0.1]: (name: ctx_result_name, filter:apv_filter<functionName = name.currentFunction>)
        => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter),
    ["${name} has ${filter[plural=one]}", priority=1.1]: (name: ctx_result_name, filter:npp_filter<functionName = name.currentFunction>)
        => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter),
}

// note: we need to make new non-terminals for these, it is not enough to use constraints
// because direct_answer_phrase becomes too big at inference
direct_answer_phrase_0 : D.DirectAnswerPhrase = {
    direct_answer_phrase with { index = 0 };
}
direct_answer_phrase_1 : D.DirectAnswerPhrase = {
    direct_answer_phrase with { index = 1 };
}
direct_answer_phrase_2 : D.DirectAnswerPhrase = {
    direct_answer_phrase with { index = 2 };
}
direct_answer_phrase_3 : D.DirectAnswerPhrase = {
    direct_answer_phrase with { index = 3 };
}

// a noun phrase of the form "the X is ... and the Y is ..."
// used to answer questions, and to add extra information after recommendations & action results
direct_result_info_phrase : D.ResultPhrase = {
    one_param_direct_result_info_phrase,
    two_param_direct_result_info_phrase,
    three_param_direct_result_info_phrase,
    ?long_projections four_param_direct_result_info_phrase,
}

one_param_direct_result_info_phrase : D.ResultPhrase = {
    ["the ${param} is ${v}"] : (ctx:ctx_with_result, param:out_param_Any<functionName = ctx.currentFunction>, v:constant_Any<type = param.type>) => {
        assert(param.type.equals(v.getType()));
        const bag = new SlotBag(param.schema);
        bag.set(param.name, v);
        return D.makeResultPhrase(ctx, bag);
    },
    ["the ${param} is ${v}"] : (ctx:ctx_with_result, param:out_param_Any<functionName = ctx.currentFunction>, v:constant_Any<type = param.elem>) => {
        const bag = new SlotBag(param.schema);
        bag.set(param.name, new Ast.Value.Array([v]));
        return D.makeResultPhrase(ctx, bag);
    },
    ["the ${param} are ${pair}"] : (ctx:ctx_with_result, param:out_param_Any<functionName = ctx.currentFunction>, pair:constant_pairs<type = param.elem>, v1:constant_Any<type = param.elem>) => {
        const bag = new SlotBag(param.schema);
        bag.set(param.name, new Ast.Value.Array(pair));
        return D.makeResultPhrase(ctx, bag);
    },

    ["the distance is ${v}"] : (ctx:ctx_with_result, v:constant_Measure_m) => {
        const bag = new SlotBag(null);
        bag.set('distance', v);
        return D.makeResultPhrase(ctx, bag);
    },

    ["the answer is ${v}"] : (ctx:ctx_with_result, v:constant_String) => {
        const bag = new SlotBag(null);
        bag.set('answer', v);
        return D.makeResultPhrase(ctx, bag);
    },

    ["the result is ${v}"] : (ctx:ctx_with_result, v:constant_Any) => {
        const bag = new SlotBag(null);
        bag.set('result', v);
        return D.makeResultPhrase(ctx, bag);
    },
}

two_param_direct_result_info_phrase : D.ResultPhrase = {
    ["${b1} and ${b2}"]: (b1:one_param_direct_result_info_phrase, b2:one_param_direct_result_info_phrase) => D.mergeResultPhrase(b1, b2),
}

three_param_direct_result_info_phrase : D.ResultPhrase = {
    // account for nulls when merging
    ["${b1}, ${b2}"]: (b1:one_param_direct_result_info_phrase, b2:two_param_direct_result_info_phrase) => D.mergeResultPhrase(b1, b2);
}

four_param_direct_result_info_phrase : D.ResultPhrase = {
    // account for nulls when merging
    ["${b1}, ${b2}, ${b3}"]: (b1:one_param_direct_result_info_phrase, b2:one_param_direct_result_info_phrase, b3:two_param_direct_result_info_phrase)
    => {
        const b12 = D.mergeResultPhrase(b1, b2);
        if (b12 === null)
            return null;
        return D.mergeResultPhrase(b12, b3);
    },
}

// a noun phrase of the form "a restaurant in Cambridge that serves X"
// structurally similar to a with_filter_table, but used to describe a result
// so either filters & comparisons are not allowed, and the AST is different (it's a SlotBag)
result_info_phrase : D.ResultPhrase = {
    // one, two or three slots, without any "or", "not" or "comparison" filters
    // only "and" and "contains"
    // and furthermore, if the context is a projection, all projected fields must
    // appear as filters
    one_with_info_phrase [weight=0.33*2, priority=1];
    one_which_info_phrase [weight=0.33*2, priority=1];
    one_clean_info_phrase [weight=0.33*2, priority=1];

    two_with_info_phrase [weight=0.33, priority=2];
    two_which_info_phrase [weight=0.33, priority=2];
    two_clean_info_phrase [weight=0.33, priority=2];

    !inference {
        three_with_info_phrase [weight=0.33*0.5];
        three_which_info_phrase [weight=0.33*0.5];
        three_clean_info_phrase [weight=0.33*0.5];
    }

    ?long_projections {
        n_with_info_phrase;
        n_with_info_phrase;
        n_with_info_phrase;
    }
}

base_result_phrase : D.ResultPhrase = {
    ["${table}"] : (ctx:ctx_with_result, table:base_table<functionName = ctx.currentFunction>) => {
        assert(table.schema instanceof Ast.FunctionDef);
        return D.makeResultPhrase(ctx, new SlotBag(table.schema));
    },
}

equal_with_filter : C.FilterSlot = {
    ["the ${p} equal to ${x}"]: (p:out_param_Any, x:constant_Any<type=p.type>) => C.makeFilter($loader, p, '==', x),
}

one_with_info_phrase : D.ResultPhrase = {
    ["${table} {with|having} ${filter} [plural=table[plural]]"]: (table:base_result_phrase, filter:npp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]: (table:base_result_phrase, filter:equal_with_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
}

one_which_info_phrase : D.ResultPhrase = {
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:npi_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:avp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:base_result_phrase, filter:apv_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:npv_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
}

one_clean_info_phrase : D.ResultPhrase = {
    ["${filter} ${table} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} ${filter} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:pvp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} ${filter} [plural=table[plural]]"]:
        (table:base_result_phrase, filter:preposition_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}

two_with_info_phrase : D.ResultPhrase = {
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    // XXX not sure about this one, once a table is "which" it should stay which
    // concretely, it generates "restaurants that serve chinese food and having moderate price" which seems awkward?
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
}

two_which_info_phrase : D.ResultPhrase = {
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_with_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_which_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}

two_clean_info_phrase : D.ResultPhrase = {
    ["${filter} ${table} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:pvp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:preposition_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}

three_with_info_phrase : D.ResultPhrase = {
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:two_with_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:two_with_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:two_which_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:two_which_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:npp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:equal_with_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
}

three_which_info_phrase : D.ResultPhrase = {
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_with_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:two_with_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:two_with_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_with_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_which_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:two_which_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:two_which_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_which_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:two_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}

three_clean_info_phrase : D.ResultPhrase = {
    ["${filter} ${table} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:pvp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:two_clean_info_phrase, filter:preposition_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}


n_with_info_phrase : D.ResultPhrase = {
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    // XXX not sure about this one, once a table is "which" it should stay which
    // concretely, it generates "restaurants that serve chinese food and having moderate price" which seems awkward?
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:equal_with_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),

    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:n_with_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${filter} [plural=table[plural]]"]:
        (table:n_with_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:n_which_info_phrase, filter:npp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {and having|and with|, with} ${filter} [plural=table[plural]]"]:
        (table:n_which_info_phrase, filter:equal_with_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:npp_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
    ["${table} {with|having} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:equal_with_filter<functionName = table.functionName>) => D.addSlotToResultPhrase(table, filter),
}

n_which_info_phrase : D.ResultPhrase = {
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_with_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_with_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_which_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_which_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:one_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_with_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:n_with_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:n_with_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_with_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_which_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:n_which_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:n_which_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_which_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:npi_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:avp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]", priority=-0.1]:
        (table:n_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:npv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}

n_clean_info_phrase : D.ResultPhrase = {
    ["${filter} ${table} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:pvp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:one_clean_info_phrase, filter:preposition_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),

    ["${filter} ${table} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:apv_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:pvp_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
    ["${table} ${filter} [plural=table[plural]]"]:
        (table:n_clean_info_phrase, filter:preposition_filter<functionName = table.functionName>)
            => D.addSlotToResultPhrase(table, filter),
}
