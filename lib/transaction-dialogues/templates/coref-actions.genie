// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Coref actions: actions that operate on the current result, referred by coreference ("it", "that", "the restaurant")

import { Ast, } from 'thingtalk';

import * as C from '../../templates/ast_manip';
import ThingpediaLoader from '../../templates/load-thingpedia';
import * as D from '../dialogue_acts';

coref_action_phrase : Ast.Invocation = {
    ( action:action_coref_context
    | action:get_command_coref_context
    ) => {
        if (!(action.expression instanceof Ast.InvocationExpression))
            return null;
        if (action.slot !== null || !$loader.isIDType(action.type)) // TODO: non-id parameter passing
            return null;
        return C.replacePlaceholderWithUndefined(action.expression.invocation, action.pname!);
    };
}

list_coref_action_phrase : Ast.Invocation = {
    ( action:action_coref_list_context
    | action:get_command_coref_list_context
    ) => {
        if (!(action.expression instanceof Ast.InvocationExpression))
            return null;
        if (action.slot !== null || !$loader.isIDType(action.type)) // TODO: non-id parameter passing
            return null;
        return C.replacePlaceholderWithUndefined(action.expression.invocation, action.pname!);
    };
}

contextual_action_phrase : Ast.Invocation = {
    ( action:complete_action
    | action:complete_get_command
    ) => {
        if (!(action instanceof Ast.InvocationExpression))
            return null;
        return action.invocation;
    };
}

// proposals/recommendations from the agent

action_coref_recommendation : Ast.Invocation = {
    ( 'would you like to' action:coref_action_phrase '?' [priority=1]
    | 'would you like me to' action:coref_action_phrase ' for you ?' [priority=1]
    ) => {
        if (action.in_params.some((ip) => !ip.value.isUndefined))
            return null;
        return action;
    };
}

action_coref_list_proposal : Ast.Invocation = {
    'would you like to' action:list_coref_action_phrase '?' [priority=1] => {
        if (action.in_params.some((ip) => !ip.value.isUndefined))
            return null;
        return action;
    };
}

// sentences from the user

coref_action_command : Ast.Invocation = {
    ctx:ctx_with_action base:coref_action_phrase with { functionName = ctx.nextFunction }
        => D.contextualAction(ctx, base);
    ctx:ctx_without_action base:coref_action_phrase => base;

    ( action:coref_action_command param:preposition_input_param with { functionName = action.functionName }
    | action:coref_action_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam($loader, action, param);
}

action_by_name_command : Ast.Invocation = {
    ctx:ctx_incomplete_action base:contextual_action_phrase with { functionName = ctx.nextFunction }
        => D.contextualAction(ctx, base);
    ctx:ctx_without_action base:contextual_action_phrase => base;

    ( action:action_by_name_command param:preposition_input_param with { functionName = action.functionName }
    | action:action_by_name_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam($loader, action, param);
}

// an action command that continues an existing action command (used for slot-filling)
action_continuation_command : Ast.Invocation = {
    ( ctx:ctx_incomplete_action base:coref_action_phrase with { functionName = ctx.nextFunction }
    | ctx:ctx_incomplete_action base:contextual_action_phrase with { functionName = ctx.nextFunction }
    ) => D.contextualAction(ctx, base);

    ( action:action_continuation_command param:preposition_input_param with { functionName = action.functionName }
    | action:action_continuation_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam($loader, action, param);
}

continuation_query : Ast.Invocation = {
    ctx:ctx_incomplete_action base:complete_table with { functionName = ctx.nextFunction } => {
        if (!(base instanceof Ast.InvocationExpression))
            return null;
        return D.contextualAction(ctx, base.invocation);
    };
}

// sentences from the agent
action_description_phrase : Ast.Invocation = {
    coref_action_phrase;
    action:thingpedia_complete_action => {
        if (!(action instanceof Ast.InvocationExpression))
            return null;
        return action.invocation;
    };

    ( action:action_description_phrase param:preposition_input_param with { functionName = action.functionName }
    | action:action_description_phrase ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam($loader, action, param);
}
