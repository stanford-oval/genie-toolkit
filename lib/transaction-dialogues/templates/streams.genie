// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates for converting one-shot commands into continuous commands

import { Ast, } from 'thingtalk';

import * as C from '../../templates/ast_manip';
import ThingpediaLoader from '../../templates/load-thingpedia';
import * as D from '../dialogue_acts';

notification_preamble : D.ContextInfo = {
    ["reminder:", priority=1] : (ctx : ctx_with_notification) => D.checkIsReminder(ctx, 'say'),
    ["alert:", priority=1] : (ctx : ctx_with_notification) => D.checkIsReminder(ctx, 'alert'),
    ["alert:", priority=1] : (ctx : ctx_with_notification) => D.checkIsReminder(ctx, 'timer_expire'),

    ["notification from ${app}:"] : (ctx : ctx_with_notification, app : ctx_notification_app_name) => ctx,

    // empty preamble if we don't have the app name
    ["", priority=-1] : (ctx : ctx_with_notification) => ctx.state.dialogueActParam === null ? ctx : null,
}

notification_error_preamble : D.ContextInfo = {
    ["${sorry} {there was an error in|an error occurred in} ${app}:"] : (sorry : sorry_preamble, ctx : ctx_with_notification, app : ctx_notification_app_name) => ctx,

    // empty preamble if we don't have the app name
    ["${sorry} {there was an error}:"] : (sorry : sorry_preamble, ctx : ctx_with_notification) => ctx.state.dialogueActParam === null ? ctx : null,
}

add_separate_stream_to_query : Ast.Expression = {
    ?timer ['{send this to me|send it to me|i want to see this|i want this|send this} ${stream}']:
        (stream : timer) => stream,
    ['{send this to me|send it to me|i want to see this|i want this|send this} ${stream}']:
        (stream : stream) => stream,
}

add_separate_stream : Ast.Expression = {
    ['{do this|do it|do it automatically} ${stream}']: (stream : stream) => stream,
    ?timer ['{do this|do it|do it automatically} ${stream}']: (stream : timer) => stream,
}
