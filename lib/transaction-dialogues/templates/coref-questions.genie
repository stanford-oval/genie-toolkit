// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Coref question templates: questions about the current result, referred by coreference ("it", "that", "the restaurant")

import assert from 'assert';
import { Ast } from 'thingtalk';

import * as C from '../../templates/ast_manip';
import ThingpediaLoader from '../../templates/load-thingpedia';
import * as D from '../dialogue_acts';

// questions with "it"/"that" -- coreference on a single result

out_param_list_for_coref_question : C.ParamSlot[] = {
    p1:out_param_Any 'and' p2:out_param_Any with { functionName = p1.functionName } => {
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        assert(C.isSameFunction(p1.schema, p2.schema));
        return [p1, p2];
    };

    p1:out_param_Any ',' p2:out_param_Any with { functionName = p1.functionName } (',' | '') 'and' p3:out_param_Any with { functionName = p1.functionName } => {
        if (p1.name === 'id' || p2.name === 'id' || p3.name === 'id')
            return null;
        if (p1.name === p2.name || p2.name === p3.name || p1.name === p3.name)
            return null;
        assert(C.isSameFunction(p1.schema, p2.schema));
        assert(C.isSameFunction(p1.schema, p3.schema));
        return [p1, p2, p3];
    };
}

simple_user_search_question : C.ParamSlot[] = {
    // straight up questions
    ( ('can you tell me' | '') 'what is' ('the' | 'its') param:out_param_Any '?'
    | 'can you tell me' ('the' | 'its') param:out_param_Any '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does it have ?'
    | 'i would like to' ('know' | 'see') ('the' | 'its') param:out_param_Any ('first' | '') '.'
    | 'i need' ('the' | 'its') param:out_param_Any ('first' | '') '.'
    | 'i just need' ('the' | 'its') param:out_param_Any '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [param];
    };

    ( ('can you tell me' | '') 'what' ('is' | 'are') ('the' | 'its') params:out_param_list_for_coref_question '?'
    | 'can you tell me' ('the' | 'its') params:out_param_list_for_coref_question '?'
    | 'i would like to' ('know' | 'see') ('the' | 'its') params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i need' ('the' | 'its') params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i just need' ('the' | 'its') params:out_param_list_for_coref_question '.'
    ) => params;

    ( ('can you tell me' | '') 'what is' 'the' param:out_param_Any 'of the' base:base_table with { functionName = param.functionName } '?'
    | 'can you tell me' 'the' param:out_param_Any 'of the' base:base_table with { functionName = param.functionName } '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does the' base:base_table with { functionName = param.functionName } 'have ?'
    | 'i would like to' ('know' | 'see') 'the' param:out_param_Any 'of the' base:base_table with { functionName = param.functionName } ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' param:out_param_Any 'of the' base:base_table with { functionName = param.functionName } '.'

    | ('can you tell me' | '') 'what is' 'the' base:base_table '\'s' param:out_param_Any with { functionName = base.functionName } '?'
    | 'can you tell me' 'the' base:base_table '\'s' param:out_param_Any with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') 'the' base:base_table '\'s' param:out_param_Any with { functionName = base.functionName } ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' base:base_table '\'s' param:out_param_Any with { functionName = base.functionName } '.'
    ) => {
        assert(C.isSameFunction(base.schema!, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    };

    ( ('can you tell me' | '') 'what' ('is' | 'are') 'the' params:out_param_list_for_coref_question 'of the' base:base_table with { functionName = params.functionName } '?'
    | 'can you tell me' 'the' params:out_param_list_for_coref_question 'of the' base:base_table with { functionName = params.functionName } '?'
    | ('can you tell me' | '') 'what' params:out_param_list_for_coref_question 'does the' base:base_table with { functionName = params.functionName } 'have ?'
    | 'i would like to' ('know' | 'see') 'the' params:out_param_list_for_coref_question 'of the' base:base_table with { functionName = params.functionName } ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' params:out_param_list_for_coref_question 'of the' base:base_table with { functionName = params.functionName } '.'

    | ('can you tell me' | '') 'what is' 'the' base:base_table '\'s' params:out_param_list_for_coref_question with { functionName = base.functionName } '?'
    | 'can you tell me' 'the' base:base_table '\'s' params:out_param_list_for_coref_question with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') 'the' base:base_table '\'s' params:out_param_list_for_coref_question with { functionName = base.functionName } ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' base:base_table '\'s' params:out_param_list_for_coref_question with { functionName = base.functionName } '.'
    ) => {
        if (!params.every((p) => C.isSameFunction(base.schema!, p.schema)))
            return null;
        return params;
    };

    // boolean projection
    ( ('can you tell me' | '') 'does' ('it' | 'this' | 'that') 'have' param:npp_boolean_projection '?'
    | ('can you tell me' | '') 'is' 'there' param:npp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'has' param:npp_boolean_projection ('first' | '') '.'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'there' 'is' param:npp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'does' ('it' | 'this' | 'that') param:avp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') param:avp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'is' ('it' | 'this' | 'that') param:pvp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'is' param:pvp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'is' ('it' | 'this' | 'that') param:preposition_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'is' param:preposition_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'it' param:npi_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'is' param:npi_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'it' param:npv_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'is' param:npv_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'it' param:apv_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('it' | 'this' | 'that') 'is' param:apv_boolean_projection ('first' | '') '.'
    ) => {
        return [param];
    };

    ( ('can you tell me' | '') 'does' 'the' base:base_table 'have' param:npp_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'has' param:npp_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'does' 'the' base:base_table param:avp_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table param:avp_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'the' base:base_table param:pvp_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'is' param:pvp_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'the' base:base_table param:preposition_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'is' param:preposition_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'the' base:base_table param:npi_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'is' param:npi_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'the' base:base_table param:npv_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'is' param:npv_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    | ('can you tell me' | '') 'is' 'the' base:base_table param:apv_boolean_projection with { functionName = base.functionName } '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'the' base:base_table 'is' param:apv_boolean_projection with { functionName = base.functionName } ('first' | '') '.'
    ) => {
        assert(C.isSameFunction(base.schema!, param.schema));
        return [param];
    };
}

for (const proj of $loader.projections) {
    if (proj.category === 'pvp' || proj.category === 'preposition') {
        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) ('is'|'was'|'are'|'were') ('it' | 'this' | 'that') #(proj.canonical) '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) ('it' | 'this' | 'that') ('is'|'was'|'are'|'were') #(proj.canonical) ('first' | '') '.'
        ) => {
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) ('is'|'was'|'are'|'were') 'the' base:base_table #(proj.canonical) '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } ('is'|'was'|'are'|'were') #(proj.canonical) ('first' | '') '.'
        ) => {
            if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                return null;
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        if (proj.base) {
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') ('it' | 'this' | 'that') ('is'|'was'|'are'|'were') #(proj.canonical) ('first' | '') '.' => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } ('is'|'was'|'are'|'were') #(proj.canonical) ('first' | '') '.' => {
                if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
        }
    }
    if (proj.category === 'avp') {
        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) ('do'|'does'|'did') ('it' | 'this' | 'that') #(proj.canonical) '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) ('it' | 'this' | 'that') #(proj.canonical) ('first' | '') '.'
        ) => {
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) ('do'|'does'|'did') 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } #(proj.canonical) '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) 'the' base:base_table #(proj.canonical) ('first' | '') '.'
        ) => {
            if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                return null;
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        if (proj.base) {
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') ('it' | 'this' | 'that') #(proj.canonical) ('first' | '') '.' => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } #(proj.canonical) ('first' | '') '.' => {
                if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
        }
    }
    if (proj.category === 'reverse_verb') {
        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) #(proj.canonical) ('it' | 'this' | 'that')  '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) #(proj.canonical) ('it' | 'this' | 'that') ('first' | '') '.'
        ) => {
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        simple_user_search_question : C.ParamSlot[] = ( ('can you tell me' | '') #(proj.pronoun) #(proj.base) #(proj.canonical) 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } '?'
        | 'i would like to' ('know' | 'see') #(proj.pronoun) #(proj.base) #(proj.canonical) 'the' base:base_table ('first' | '') '.'
        ) => {
            if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                return null;
            if (proj.pname === 'id')
                return null;
            return [proj.pslot];
        };

        if (proj.base) {
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') #(proj.canonical) ('it' | 'this' | 'that') ('first' | '') '.' => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
            simple_user_search_question : C.ParamSlot[] = 'i would like to' ('know' | 'see') 'the' #(proj.base) ('that'|'which'|'') #(proj.canonical) 'the' base:base_table with { functionName = (proj.pslot.schema.qualifiedName) } ('first' | '') '.' => {
                if (!C.isSameFunction(base.schema!, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            };
        }
    }
}

simple_user_search_question_for_list : C.ParamSlot[] = {
    // straight up questions
    ( ('can you tell me' | '') 'what are' ('the' | 'their') param:out_param_Any '?'
    | 'can you tell me' ('the' | 'their') param:out_param_Any '?'
    | 'can you tell me' 'the' param:out_param_Any ('for both of them' | 'for all of them') '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does it have ?'
    | 'i would like to' ('know' | 'see') ('both of' | '') ('the' | 'their') param:out_param_Any ('first' | '') '.'
    | 'i need' ('the' | 'their') param:out_param_Any ('first' | '') '.'
    | 'i just need' ('the' | 'their') param:out_param_Any '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [param];
    };


    // boolean projection
    ( ('can you tell me' | '') 'do' ('they' | 'these' | 'those') 'have' param:npp_boolean_projection '?'
    | ('can you tell me' | '') 'are' 'there' param:npp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'have' param:npp_boolean_projection ('first' | '') '.'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') 'there' 'are' param:npp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'do' ('they' | 'these' | 'those') param:avp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') param:avp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'are' ('they' | 'these' | 'those') param:pvp_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'are' param:pvp_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'are' ('they' | 'these' | 'those') param:preposition_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'are' param:preposition_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'are' ('they' | 'these' | 'those') param:npi_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'are' param:npi_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'are' ('they' | 'these' | 'those') param:npv_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'are' param:npv_boolean_projection ('first' | '') '.'
    | ('can you tell me' | '') 'are' ('they' | 'these' | 'those') param:apv_boolean_projection '?'
    | 'i would like to' ('know' | 'see') ('if' | 'whether') ('they' | 'these' | 'those') 'are' param:apv_boolean_projection ('first' | '') '.'
    ) => {
        return [param];
    };
}

boolean_user_search_question : C.ParamSlot[] = {
    // question in boolean
    ( 'does' ('that' | 'it' | 'this') 'have' param:npp_filter '?'
    | 'does' ('that' | 'it' | 'this') param:avp_filter '?'
    ) => D.booleanQuestion(null, param);

    ( 'is' ('that' | 'it' | 'this') 'a' param:apv_filter base:base_table with { functionName = param.functionName } '?'
    | 'is' ('the' | 'this' | 'that') base:base_table with { is_list = true } param:apv_filter with { functionName = base.functionName } '?'

    | 'is' ('that' | 'it' | 'this') 'a' base:base_table with { is_list = true } param:pvp_filter with { functionName = base.functionName } '?'
    | 'is' ('the' | 'this' | 'that') base:base_table with { is_list = true } param:pvp_filter with { functionName = base.functionName } '?'

    | 'is' ('that' | 'it' | 'this') 'a' base:base_table with { is_list = true } param:preposition_filter with { functionName = base.functionName } '?'
    | 'is' ('the' | 'this' | 'that') base:base_table with { is_list = true } param:preposition_filter with { functionName = base.functionName } '?'

    | 'is' ('that' | 'it' | 'this') 'a' base:base_table with { is_list = true } ('that' | 'which') param:avp_filter with { functionName = base.functionName } '?'
    | 'does' ('the' | 'this' | 'that') base:base_table with { is_list = true } param:avp_filter with { functionName = base.functionName } '?'

    | 'is' ('that' | 'it' | 'this') 'a' base:base_table with { is_list = true } ('that has' | 'with') param:npp_filter with { functionName = base.functionName } '?'
    | 'does' ('the' | 'this' | 'that') base:base_table with { is_list = true } 'have' param:npp_filter with { functionName = base.functionName } '?'
    ) => {
        if (!base.schema!.is_list)
            return null;
        return D.booleanQuestion(base, param);
    };
}

boolean_user_search_question_for_list : C.ParamSlot[] = {
    // question in boolean
    ( ('does either of' | 'does any of') ('them' | 'these' | 'those') 'have' param:npp_filter '?'
    | 'do' 'they' 'have' param:npp_filter '?'
    | ('does either of' | 'does any of') ('them' | 'these' | 'those') param:avp_filter '?'
    | 'do they' param:avp_filter '?'
    ) => D.booleanQuestion(null, param);

    ( ('is either of' | 'is any of')  ('them' | 'these' | 'those') 'a' param:apv_filter base:base_table with { functionName = param.functionName } '?'
    | 'are they' param:apv_filter base:base_table with { functionName = param.functionName } '?'
    | 'are' ('the' | 'these' | 'those') base:base_table param:apv_filter with { functionName = base.functionName } '?'

    | ('is either of' | 'is any of')  ('them' | 'these' | 'those') 'a' base:base_table param:pvp_filter with { functionName = base.functionName } '?'
    | 'are they' base:base_table param:pvp_filter with { functionName = base.functionName } '?'
    | 'are' ('the' | 'these' | 'those') base:base_table param:pvp_filter with { functionName = base.functionName } '?'

    | ('is either of' | 'is any of')  ('them' | 'these' | 'those')  'a' base:base_table param:preposition_filter with { functionName = base.functionName } '?'
    | 'are they' base:base_table param:preposition_filter with { functionName = base.functionName } '?'
    | 'are' ('the' | 'these' | 'those') base:base_table param:preposition_filter with { functionName = base.functionName } '?'

    | ('is either of' | 'is any of')  ('them' | 'these' | 'those')  'a' base:base_table ('that' | 'which') param:avp_filter with { functionName = base.functionName } '?'
    | 'are they' base:base_table ('that' | 'which') param:avp_filter with { functionName = base.functionName } '?'
    | 'do' ('the' | 'these' | 'those') base:base_table param:avp_filter with { functionName = base.functionName } '?'

    | ('is either of' | 'is any of')  ('them' | 'these' | 'those')  'a' base:base_table ('that has' | 'with') param:npp_filter with { functionName = base.functionName } '?'
    | 'are they' base:base_table ('that has' | 'with') param:npp_filter with { functionName = base.functionName } '?'
    | 'do' ('the' | 'these' | 'those') base:base_table 'have' param:npp_filter with { functionName = base.functionName } '?'
    ) => D.booleanQuestion(base, param);
}

// questions by name (when in an list)

user_search_question_with_name : [Ast.EntityValue|Ast.NumberValue, C.ParamSlot[]] = {
    // straight up questions
    ( ('can you tell me' | '') 'what is' name:constant_name '\'s' param:out_param_Any with { associatedIdType = name.type } '?'
    | ('can you tell me' | '') 'what is' 'the' param:out_param_Any 'of' name:constant_name with { type = param.associatedIdType } '?'
    | 'can you tell me' name:constant_name '\'s' param:out_param_Any with { associatedIdType = name.type } '?'
    | 'can you tell me' 'the' param:out_param_Any 'of' name:constant_name with { type = param.associatedIdType } '?'
    | 'i would like to' ('know' | 'see') name:constant_name '\'s' param:out_param_Any with { associatedIdType = name.type } ('first' | '') '.'
    | 'i would like to' ('know' | 'see') 'the' param:out_param_Any 'of' name:constant_name with { type = param.associatedIdType } ('first' | '') '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    };

    // straight up questions
    ( ('can you tell me' | '') 'what is' name:constant_name '\'s' params:out_param_list_for_coref_question with { associatedIdType = name.type } '?'
    | ('can you tell me' | '') 'what is' 'the' params:out_param_list_for_coref_question 'of' name:constant_name with { type = params.associatedIdType } '?'
    | 'can you tell me' name:constant_name '\'s' params:out_param_list_for_coref_question with { associatedIdType = name.type }  '?'
    | 'can you tell me' 'the' params:out_param_list_for_coref_question 'of' name:constant_name with { type = params.associatedIdType } '?'
    | 'i would like to' ('know' | 'see') name:constant_name '\'s' params:out_param_list_for_coref_question with { associatedIdType = name.type } ('first' | '') '.'
    | 'i would like to' ('know' | 'see') 'the' params:out_param_list_for_coref_question 'of' name:constant_name with { type = params.associatedIdType } ('first' | '') '.'
    ) => {
        return [name, params];
    };
}

boolean_user_search_question_with_name : [Ast.EntityValue|Ast.NumberValue, C.ParamSlot[]] = {
    // question in boolean
    ( 'does' name:constant_name 'have' param:npp_filter with { associatedIdType = name.type } '?'
    | 'does' name:constant_name param:avp_filter with { associatedIdType = name.type } '?'
    | 'is' name:constant_name param:apv_filter with { associatedIdType = name.type } '?'
    | 'is' name:constant_name param:pvp_filter with { associatedIdType = name.type } '?'
    | 'is' name:constant_name param:preposition_filter with { associatedIdType = name.type } '?'
    ) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    };

    ( 'is' name:constant_name 'a' param:apv_filter with { associatedIdType = name.type } base:base_table with { functionName = param.functionName } '?'
    | 'is' name:constant_name 'a' base:base_table with { idType = name.type } param:pvp_filter with { functionName = base.functionName } '?'
    | 'is' name:constant_name 'a' base:base_table with { idType = name.type } param:preposition_filter with { functionName = base.functionName } '?'
    | 'is' name:constant_name 'a' base:base_table with { idType = name.type } ('that' | 'which') param:avp_filter with { functionName = base.functionName } '?'
    | 'is' name:constant_name 'a' base:base_table with { idType = name.type } ('that has' | 'with') param:npp_filter with { functionName = base.functionName } '?'
    ) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    };
}

user_search_question : C.ParamSlot[] = {
    ('no ,' | '') questions:simple_user_search_question => questions;
    ('no ,' | '') questions:thingpedia_user_question '?' [weight=0.3] => questions;
    questions:boolean_user_search_question => questions;
}

user_search_question_for_list : D.UserSearchQuestionForList = {
    questions:simple_user_search_question => [null, questions];
    questions:simple_user_search_question_for_list => [null, questions];
    questions:boolean_user_search_question_for_list => [null, questions];

    ?multiwoz {
        user_search_question_with_name;
        boolean_user_search_question_with_name;
    }
}
