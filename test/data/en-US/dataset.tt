dataset @org.thingpedia.builtin.thingengine.builtin language "en" {
    stream := monitor (@org.thingpedia.builtin.thingengine.builtin.get_gps())
    #_[utterances=["when my location changes",
                   "when i move",
                   "when i move around",
                   "when i change location",
                   "when my position changes"]]
    #[id=53269105]
    #[name="MonitorGetCurrentLocation"];

    stream (p_location :Location) := monitor (@org.thingpedia.builtin.thingengine.builtin.get_gps()), location == p_location
    #_[utterances=["when my location changes to $p_location",
                   "when i reach $p_location",
                   "when i get to $p_location",
                   "when i arrive at $p_location"]]
    #[id=53269110]
    #[name="MonitorGetCurrentLocationByLocation"];

    stream (p_location :Location) := monitor (@org.thingpedia.builtin.thingengine.builtin.get_gps()), !(location == p_location)
    #_[utterances=["when i move away from $p_location",
                   "when my location changes away from $p_location",
                   "when i leave $p_location"]]
    #[id=53269117]
    #[name="MonitorGetCurrentLocationNotByLocation"];

    program := @org.thingpedia.builtin.thingengine.builtin.get_time()
    #_[utterances=["what time is it"]]
    #[id=53269120]
    #[name="GetTime"];

    program := @org.thingpedia.builtin.thingengine.builtin.get_date()
    #_[utterances=["what day is today",
                   "what day is it"]]
    #[id=53269122]
    #[name="GetDate"];

    query := @org.thingpedia.builtin.thingengine.builtin.get_random_between()
    #_[utterances=[", choose a random number",
                   ", throw a dice"]]
    #[id=53269126]
    #[name="GetRandomInteger"];

    query (p_low :Number, p_high :Number) := @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high)
    #_[utterances=["a random number between ${p_low:const} and ${p_high:const}",
                   "a random integer between ${p_low:const} and ${p_high:const}",
                   ", throw a dice between ${p_low:const} and ${p_high:const}",
                   ", generate a random number between ${p_low:const} and ${p_high:const}",
                   ", choose a number between ${p_low:const} and ${p_high:const}"]]
    #[id=53269129]
    #[name="GetRandomIntegerWithLowWithHigh"];

    action (p_message :String) := @org.thingpedia.builtin.thingengine.builtin.say(message=p_message)
    #_[utterances=["send me a message ${p_message:const}",
                   "tell me $p_message",
                   "say $p_message"]]
    #[id=53269140]
    #[name="SayWithMessage"];

/*
    action := @org.thingpedia.builtin.thingengine.builtin.discover()
    #_[utterances=["discover new devices",
                   "search devices nearby"]]
    #[id=53269134]
    #[name="Discover"];

    action (p_device :Entity(tt:device)) := @org.thingpedia.builtin.thingengine.builtin.configure(device=p_device)
    #_[utterances=["configure $p_device",
                   "setup $p_device",
                   "enable $p_device",
                   "install $p_device"]]
    #[id=53269136]
    #[name="ConfigureWithDevice"];
*/

    action (p_url :Entity(tt:url)) := @org.thingpedia.builtin.thingengine.builtin.open_url(url=p_url)
    #_[utterances=["open $p_url",
                   "open the file at $p_url",
                   "open $p_url in the browser",
                   "browse to $p_url"]]
    #[id=53269149]
    #[name="OpenUrlOnBuiltinWithUrl"];
}
dataset @org.thingpedia.everything {
    program (p_hashtag : Entity(tt:hashtag)) := monitor(@com.twitter.home_timeline(), contains(hashtags, p_hashtag)) => @com.twitter.retweet(tweet_id=tweet_id)
    #[id=-1]
    #_[preprocessed=["autoretweet tweets with $p_hashtag", "autoretweet $p_hashtag"]];

    action (p_status : String) := @com.twitter.post(status=p_status)
    #[id=1]
    #_[preprocessed=["tweet ${p_status}", "post ${p_status} on twitter"]];

    action (p_caption : String, p_picture_url : Entity(tt:picture)) := @com.twitter.post_picture(caption=p_caption, picture_url=p_picture_url)
    #[id=1.5]
    #_[preprocessed=["tweet ${p_picture_url} with caption ${p_caption}"]];

    query (p_query : String) := @com.bing.web_search(query=p_query)
    #[id=2]
    #_[preprocessed=["websites matching ${p_query}", "${p_query:const} websites", "${p_query:const} on bing"]];

    query (p_query : String) := @com.bing.image_search(query=p_query)
    #[id=3]
    #_[preprocessed=["images matching ${p_query}", "${p_query:const} images"]];

    query (p_query : String) := sort(title asc of @com.bing.image_search(query=p_query))
    #[id=3]
    #_[preprocessed=["images matching ${p_query} sorted by title", "${p_query:const} images sorted by title"]];

    query (p_query : String) := count(@com.bing.image_search(query=p_query))
    #[id=4]
    #_[preprocessed=["the number of images that match ${p_query}", "the count of images that match ${p_query:const}"]];

    query (p_query : String) := [link] of @com.bing.image_search(query=p_query)
    #[id=5]
    #_[preprocessed=["the link to images that match ${p_query}"]];

    action := @light-bulb.set_power(power=enum(on))
    #[id=6]
    #_[preprocessed=["turn on my lights"]];

    action (p_name : String) := @light-bulb(name=p_name).set_power(power=enum(on))
    #[id=7]
    #_[preprocessed=["turn on my $p_name lights"]];

    query (p_section : Enum(opinions,world_news,us_business,markets,technology,lifestyle)) := @com.wsj.get(section=p_section)
    #_[preprocessed=["articles published in the ${p_section} section of the wall street journal"]];
}
dataset @com.spotify2 language "en" {
    // this combination is so common it warrants its own primitive template...
    query (p_song :String, p_artist :Entity(com.spotify2:artist)) := @com.spotify2.playable(), id =~ p_song && contains(artists, p_artist)
    #_[utterances=["${p_song:no-undefined} by ${p_artist}",
                   "${p_song:no-undefined} from ${p_artist}"]];

    // these ones are hard to get with domain-independent templates
    query (p_artist :Entity(com.spotify2:artist)) := sort(popularity desc of @com.spotify2.playable(), contains(artists, p_artist))
    #_[utterances=[/*"${p_artist}'s greatest hits",*/
                   "popular music by ${p_artist:no-undefined}"]];
    query (p_artist :Entity(com.spotify2:artist)) := sort(release_date desc of @com.spotify2.playable(), contains(artists, p_artist))
    #_[utterances=["new ${p_artist:no-undefined}", "new music from ${p_artist:no-undefined}",
                   "${p_artist:no-undefined} by the new first"]];

    program := @com.spotify2.play(playable=$?)
    #_[utterances=["play some music on spotify",
                   "open spotify and play some music",
                   "use spotify to play some music"]]
    ;

    action (p_song :Entity(com.spotify2:playable)) := @com.spotify2.play(playable=p_song)
    #_[utterances=["play ${p_song:no-undefined} on spotify",
                   "play ${p_song:no-undefined}"]]
    ;

    program (p_song :String) := (@com.spotify2.playable(), id =~ p_song) => @com.spotify2.play(playable=id)
    #_[utterances=["i would like to hear ${p_song:const}",
                   "i would like to listen to ${p_song:const}",
                   "play ${p_song:const} on spotify",
                   "on spotify play ${p_song:const}",
                   "play ${p_song:const}"]]
    ;

    program (p_genre :String) := (@com.spotify2.playable(), contains~(genres, p_genre)) => @com.spotify2.play(playable=id)
    #_[utterances=["i would like to hear some ${p_genre:const}",
                   "i would like to listen to ${p_genre:const} music",
                   "play ${p_genre:const} on spotify",
                   "on spotify play ${p_genre:const} music",
                   "play ${p_genre:const} music"]]
    ;

    program (p_song :String, p_playlist :String) := (@com.spotify2.song(), id =~ p_song) => @com.spotify2.add_song_to_playlist(song=id, playlist=p_playlist)
    #_[utterances=["add ${p_song:no-undefined} to ${p_playlist}",
                   "put ${p_song:no-undefined} in ${p_playlist}"]]
    ;

    program (p_playlist :String) := (@com.spotify2.get_currently_playing()) => @com.spotify2.add_song_to_playlist(song=song, playlist=p_playlist)
    #_[utterances=["add this song to ${p_playlist}",
                   "put this song in ${p_playlist}"]]
    ;

    action (p_state :Enum(on,off)) := @com.spotify2.player_shuffle(shuffle=p_state)
    #_[utterances=["turn shuffle ${p_state}",
                   "turn ${p_state} shuffle"]]
    ;

    action := @com.spotify2.player_shuffle(shuffle=enum(on))
    #_[utterances=["shuffle my spotify"]]
    ;

    action := @com.spotify.player_repeat(repeat=enum(track))
    #_[utterances=["repeat this song",
                   "turn on repeat"]]
    ;

    action := @com.spotify2.player_repeat(repeat=enum(off))
    #_[utterances=["turn off repeat"]]
    ;

    action := @com.spotify2.player_next()
    #_[utterances=["play the next song",
                   "skip this song",
                   "play the next episode",
                   "skip this episode"]]
    ;

    action := @com.spotify2.player_previous()
    #_[utterances=["play the previous song",
                   "go back a song",
                   "play the previous episode",
                   "go back an episode"]]
    #[id=27924859]
    ;

    action := @com.spotify2.player_play()
    #_[utterances=["continue playback",
                   "continue playing"]]
    ;

    action := @com.spotify2.player_pause()
    #_[utterances=["pause playback",
                   "pause playing",
                   "stop playing",
                   "stop playback",
                   "stop the music"]]
    ;

    // TODO: use "action" here so we can combine with streams
    program (p_artist :Entity(com.spotify2:artist)) :=
      @com.spotify2.playable(), contains(artists, p_artist) => @com.spotify2.play(playable=id)
    #_[utterances=["play ${p_artist:no-undefined}",
                   "play some ${p_artist:no-undefined}",
                   "play the artist ${p_artist:no-undefined}",
                   "i would like to hear ${p_artist:no-undefined}",
                   "i would like to listen to ${p_artist:no-undefined}",
                   "i would like to listen to the artist ${p_artist:no-undefined}"]]
    ;

    program (p_album :String, p_artist :Entity(com.spotify2:artist)) :=
      @com.spotify2.album(), id =~ p_album && contains(artists, p_artist) => @com.spotify2.play(playable=id)
    #_[utterances=[/*"play ${p_album:no-undefined} by ${p_artist:no-undefined}",*/
                   "play the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen to the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen to the album ${p_album:no-undefined} from ${p_artist:no-undefined}"]]
    ;

    program (p_show :String) :=
      @com.spotify2.show(), id =~ p_show => @com.spotify2.play(playable=id)
    #_[utterances=["play the podcast ${p_show:no-undefined}", "play the show ${p_show:no-undefined}",
                   "i would like to listen to the show ${p_show:no-undefined}",
                   "i would like to listen to the podcast ${p_show:no-undefined}"]]
    ;


    stream := monitor (@com.spotify2.get_user_top_tracks())
    #_[utterances=["when my top tracks changes",
                   "when I have new favorite songs"]]
    ;

    stream := monitor (@com.spotify2.get_currently_playing())
    #_[utterances=["when a song is playing"]]
    ;

    program := @com.spotify2.get_currently_playing()
    #_[utterances=["what song is playing?", "what music is playing?", "what is playing?", "what song is currently on?"]]
    ;
}

dataset @org.thingpedia.iot.light-bulb language "en" {
    action = @org.thingpedia.iot.light-bulb.set_power(power=enum(off))
    #_[utterances=["shut down the lights"]]
    #[id=52295275]
    #[name="SetPowerOnLightBulbWithPowerOff"];

    program = @org.thingpedia.iot.light-bulb.power()
    #_[utterances=["are the lights on?",
                   "are the lights off?",
                   "is my light-bulb on or off?",
                   "is my lightbulb on?",
                   "check if my lightbulb is on",
                   "check if my lights are off",
                   "check if the lights are on or off",
                   "is my light bulb on?"]]
    #[id=52298563]
    #[name="LightBulbPowerStateThenNotify"];

    program = @org.thingpedia.iot.light-bulb(all=true).power()
    #_[utterances=["which lights are on?",
                   "are any lights on?",
                   "are all the lights on?",
                   "which lights are off?",
                   "are any lights off?",
                   "are all the lights off?",
                   "list the state of all the lights",
                   "tell me if all the lights are on",
                   "tell me if all the lights are off"]]
    #[id=52298563]
    #[name="LightBulbPowerStateAllThenNotify"];

    stream = monitor (@org.thingpedia.iot.light-bulb.power())
    #_[utterances=["when the state of my lights changes",
                   "whenever the state of my lights has changed",
                   "when the state of the lights changes"]]
    #[id=52298575]
    #[name="MonitorLightBulbPowerState"];

    stream (p_power :Enum(on,off)) = monitor (@org.thingpedia.iot.light-bulb.power()), power == p_power
    #_[utterances=["when my lights turn ${p_power}",
                   "when my lights are ${p_power}",
                   "when I turn ${p_power} the lights",
                   "when somebody turns ${p_power} my lights",
                   "when my lights are switched ${p_power}",
                   "when I switch ${p_power} my lights"]]
    #[id=52298577]
    #[name="MonitorLightBulbPowerStateByPower"];

    action (p_power :Enum(on,off)) = @org.thingpedia.iot.light-bulb.set_power(power=p_power)
    #_[utterances=["set ${p_power} the lights",
                   "turn ${p_power} my light bulb",
                   "turn ${p_power} the light",
                   "turn ${p_power} the lamp",
                   "turn ${p_power} my lights",
                   "set the lights ${p_power}",
                   "turn my light bulb ${p_power}",
                   "turn the light ${p_power}",
                   "turn the lamp ${p_power}",
                   "turn the led ${p_power}",
                   "turn my lights ${p_power}"]]
    #[id=52298582]
    #[name="SetPowerOnLightBulbWithPower"];

    action (p_power :Enum(on,off)) = @org.thingpedia.iot.light-bulb(all=true).set_power(power=p_power)
    #_[utterances=["set ${p_power} all the lights",
                   "turn ${p_power} all my light bulb",
                   "turn ${p_power} all the light",
                   "turn ${p_power} all the lamp",
                   "turn ${p_power} all my lights"]]
    #[name="SetPowerOnLightBulbWithPowerAll"];


    program (p_name :String) = @org.thingpedia.iot.light-bulb(name=p_name).power()
    #_[utterances=["are the ${p_name:const} lights off?",
                   "is my ${p_name:const} light-bulb on or off?",
                   "is my ${p_name:const} lightbulb on?",
                   "check if my ${p_name:const} lightbulb is on",
                   "check if my ${p_name:const} lights are on",
                   "check if my ${p_name:const} lights are off",
                   "check if the ${p_name:const} lights are on or off",
                   "is my ${p_name:const} light bulb on?",
                   "are the ${p_name:const} lights on?"]]
    #[id=54033614]
    #[name="PowerThenNotify"];

    query (p_name :String) = @org.thingpedia.iot.light-bulb(name=p_name).power()
    #_[utterances=["the power state of my ${p_name:const} lights",
                   "whether the ${p_name:const} lights are on or off",
                   "the power state of the ${p_name:const} light bulb"]]
    #[id=54033623]
    #[name="Power"];

    stream (p_name :String) = monitor (@org.thingpedia.iot.light-bulb(name=p_name).power())
    #_[utterances=["when I switch on or off my ${p_name:const} lights",
                   "when the state of my ${p_name:const} lights changes"]]
    #[id=54033626]
    #[name="MonitorPower"];

    stream (p_name :String, p_power :Enum(on,off)) = monitor (@org.thingpedia.iot.light-bulb(name=p_name).power()), power == p_power
    #_[utterances=["when I turn ${p_power} the ${p_name:const} lights",
                   "when somebody turns ${p_power} my ${p_name:const} lights",
                   "when my ${p_name:const} lights are switched ${p_power}",
                   "when I switch ${p_power} my ${p_name:const} lights",
                   "when my ${p_name:const} lights turn ${p_power}"]]
    #[id=54033628]
    #[name="MonitorPowerByPower"];

    action (p_name :String, p_power :Enum(on,off)) = @org.thingpedia.iot.light-bulb(name=p_name).set_power(power=p_power)
    #_[utterances=["turn ${p_power} my ${p_name:const} light bulb",
                   "turn ${p_power} the ${p_name:const} light",
                   "turn ${p_power} the ${p_name:const} lamp",
                   "turn ${p_power} the ${p_name:const} lights",
                   "turn ${p_power} the lights called ${p_name:const}",
                   "turn ${p_power} the lights in the ${p_name:const}",
                   "set ${p_power} the ${p_name:const} lights"]]
    #[id=54033633]
    #[name="SetPowerWithPower"];

    program (p_name :String, p_power :Enum(on,off)) = @org.thingpedia.iot.light-bulb(name=p_name).set_power(power=p_power)
    #_[utterances=["light ${p_name:const} ${p_power}",
                   "light bulb ${p_name:const} ${p_power}"]]
    #[name="SetPowerWithPower2"];

    action (p_name :String, p_power :Enum(on,off)) = @org.thingpedia.iot.light-bulb(all=true, name=p_name).set_power(power=p_power)
    #_[utterances=["turn ${p_power} all my ${p_name:const} light bulb",
                   "turn ${p_power} all the ${p_name:const} light",
                   "turn ${p_power} all the ${p_name:const} lamp",
                   "turn ${p_power} all the ${p_name:const} lights",
                   "turn ${p_power} all the lights called ${p_name:const}",
                   "turn ${p_power} all the lights in the ${p_name:const}",
                   "set ${p_power} all the ${p_name:const} lights"]]
    #[name="SetPowerWithPowerAll"];

    action (p_name :String) = @org.thingpedia.iot.light-bulb(name=p_name).color_loop()
    #_[utterances=["color loop the ${p_name:const} lights",
                   "loop the color in my ${p_name:const} light bulb",
                   "start disco lights for my ${p_name:const} lights",
                   "color loop on ${p_name:const}",
                   "loop colors on ${p_name:const}"]]
    #[id=54033639]
    #[name="ColorLoop"];

    action (p_name :String) = @org.thingpedia.iot.light-bulb(name=p_name).alert_long()
    #_[utterances=["flash the ${p_name:const} lights",
                   "alert me by flashing the ${p_name:const} lights"]]
    #[id=54033642]
    #[name="AlertLong"];

    action (p_name :String) = @org.thingpedia.iot.light-bulb(name=p_name).set_power(power=enum(off))
    #_[utterances=["shut down the ${p_name:const} lights"]]
    #[id=54033644]
    #[name="SetPowerWithPowerOff"];

}
dataset @org.thingpedia.iot.switch language "en" {
    program  := @org.thingpedia.iot.switch.state()
    #_[utterances=["is my switch on?",
                   "is my smart plug on?",
                   "is my smart smart switch on?",
                   "check if the switch is on",
                   "is the switch turned on?",
                   "is the smart plug turned on?",
                   "is my switch switched on?",
                   "check if the switch is switched on or off",
                   "is my switch turned on or turned off"]]
    #[id=54339857]
    #[name="StateThenNotify"];

    query  := @org.thingpedia.iot.switch.state()
    #_[utterances=["the power state of my switch",
                   "whether the switch is on or off"]]
    #[id=54339863]
    #[name="State"];

    stream  := monitor (@org.thingpedia.iot.switch.state())
    #_[utterances=["when my switch changes state"]]
    #[id=54339867]
    #[name="MonitorState"];

    stream (p_state :Enum(on,off))  := monitor (@org.thingpedia.iot.switch.state()), state == p_state
    #_[utterances=["when my switch turns ${p_state}",
                   "when the switch switches ${p_state}",
                   "if my switch becomes ${p_state}",
                   "when the switch is ${p_state}",
                   "if my switch changes to ${p_state}"]]
    #[id=54339868]
    #[name="MonitorStateByState"];

    stream  := monitor (@org.thingpedia.iot.switch.state()), state == enum(on)
    #_[utterances=["when my switch turns on",
                   "if the switch switches on",
                   "when the switch becomes on",
                   "the moment my switch changes to on",
                   "when my switch is on"]]
    #[id=54339873]
    #[name="MonitorStateByStateOn"];

    stream  := monitor (@org.thingpedia.iot.switch.state()), state == enum(off)
    #_[utterances=["when the switch is turned off",
                   "once my switch is off",
                   "when I turn off my switch",
                   "if my switch gets switched off"]]
    #[id=54339878]
    #[name="MonitorStateByStateOff"];

    action (p_power :Enum(on,off))  := @org.thingpedia.iot.switch.set_power(power=p_power)
    #_[utterances=["turn ${p_power} my switch",
                   "turn ${p_power} my smart plug",
                   "switch ${p_power} the switch",
                   "${p_power} the switch",
                   "flip my switch ${p_power}"]]
    #[id=54339882]
    #[name="SetPowerWithPower"];

    action (p_power :Enum(on,off))  := @org.thingpedia.iot.switch(all=true).set_power(power=p_power)
    #_[utterances=["set ${p_power} all the switches",
                   "turn ${p_power} all my switches"]]
    #[name="SetPowerWithPowerAll"];

    action (p_name :String, p_power :Enum(on,off))  := @org.thingpedia.iot.switch(all=true, name=p_name).set_power(power=p_power)
    #_[utterances=["turn ${p_power} all my ${p_name:const} switches",
                   "turn ${p_power} all the ${p_name:const} switch",
                   "turn ${p_power} all the switches called ${p_name:const}",
                   "turn ${p_power} all the switches in the ${p_name:const}",
                   "turn ${p_power} all the ${p_name:const}",
                   "set ${p_power} all the ${p_name:const} switches"]]
    #[name="SetPowerWithPowerAll2"];

    program (p_name :String)  := @org.thingpedia.iot.switch(name=p_name).state()
    #_[utterances=["is my ${p_name:const} switch on?",
                   "check if the ${p_name:const} switch is on",
                   "is the ${p_name:const} switch turned on?",
                   "is my ${p_name:const} switch switched on?",
                   "check if the ${p_name:const} switch is switched on or off",
                   "is my ${p_name:const} switch turned on or turned off",
                   "is my ${p_name:const} on?",
                   "check if the ${p_name:const} is on",
                   "is the ${p_name:const} turned on?",
                   "is my ${p_name:const} switched on?",
                   "check if the ${p_name:const} is switched on or off",
                   "is my ${p_name:const} turned on or turned off"]]
    #[id=54339892]
    #[name="StateThenNotify1"];

    query (p_name :String)  := @org.thingpedia.iot.switch(name=p_name).state()
    #_[utterances=["the power state of my ${p_name:const} switch",
                   "whether the ${p_name:const} switch are on or off",
                   "the state of the ${p_name:const} switch",
                   "the power state of my ${p_name:const}",
                   "whether the ${p_name:const} are on or off",
                   "the state of the ${p_name:const}"]]
    #[id=54339898]
    #[name="State1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.switch(name=p_name).state())
    #_[utterances=["when my ${p_name:const} switch changes state"]]
    #[id=54339902]
    #[name="MonitorState1"];

    stream (p_name :String, p_state :Enum(on,off))  := monitor (@org.thingpedia.iot.switch(name=p_name).state()), state == p_state
    #_[utterances=["when my ${p_name:const} switch turns ${p_state}",
                   "when the ${p_name:const} switch switches ${p_state}",
                   "if my ${p_name:const} switch becomes ${p_state}",
                   "when the ${p_name:const} switch is ${p_state}",
                   "if my ${p_name:const} switch changes to ${p_state}"]]
    #[id=54339903]
    #[name="MonitorStateByState1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.switch(name=p_name).state()), state == enum(on)
    #_[utterances=["when my ${p_name:const} switch turns on",
                   "if the ${p_name:const} switch switches on",
                   "when the ${p_name:const} switch becomes on",
                   "the moment my ${p_name:const} switch changes to on",
                   "when my ${p_name:const} switch is on"]]
    #[id=54339908]
    #[name="MonitorStateByStateOn1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.switch(name=p_name).state()), state == enum(off)
    #_[utterances=["when the ${p_name:const} switch is turned off",
                   "once my ${p_name:const} switch is off",
                   "when I turn off my ${p_name:const} switch",
                   "if my ${p_name:const} switch gets switched off"]]
    #[id=54339913]
    #[name="MonitorStateByStateOff1"];

    action (p_name :String, p_power :Enum(on,off))  := @org.thingpedia.iot.switch(name=p_name).set_power(power=p_power)
    #_[utterances=["turn ${p_power} my ${p_name:const} switch",
                   "switch ${p_power} the ${p_name:const} switch",
                   "switch ${p_power} the ${p_name:const} smart plug",
                   "switch ${p_power} the ${p_name:const} smart appliance",
                   "switch ${p_power} the ${p_name:const} smart device",
                   "turn ${p_power} my ${p_name:const}",
                   "switch ${p_power} the ${p_name:const}"]]
    #[id=54339917]
    #[name="SetPowerWithPower1"];

    program (p_name :String, p_power :Enum(on,off))  := @org.thingpedia.iot.switch(name=p_name).set_power(power=p_power)
    #_[utterances=["switch ${p_name:const} ${p_power}",
                   "${p_name:const} ${p_power}"]]
    #[name="SetPowerWithPower2"];
}
