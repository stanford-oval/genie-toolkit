// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

{
    const assert = require('assert');
    const Ast = require('../../lib/languages/multidst/ast');
    const { Slot, checkAndAddSlot } = require('./ast_utils');
}

direct_question = {
}

user_one_slot_domain_question = {
    'is it a' constant_attraction_type '?' => ['attraction-type'];
}

param_noun_phrase = {
    ( 'attraction type'
    | 'attraction'
    | 'type'
    | 'type of attraction'
    ) => 'attraction-type';

    ( 'attraction'
    | 'place'
    | 'name'
    ) => 'attraction-name';

    ( 'area'
    | 'area of the city') => 'attraction-area';
}

sys_param_noun_phrase = {
    'address' => 'attraction-system-addr';
    'post code' => 'attraction-system-post';
    'phone number' => 'attraction-system-phone';
    'opening hours' => 'attraction-system-open';
    ( 'entrance fee'
    | 'ticket cost'
    ) => 'attraction-system-fee';
}

base_noun_phrase = {
    'things to do' => new Ast.DialogState('attraction');
    'attraction' => new Ast.DialogState('attraction');
    v:constant_attraction_type => checkAndAddSlot(new Ast.DialogState('attraction'), new Slot('attraction-type', v));
}

// npp: Noun-Phrase of Property
// "X that have $npp_slot" or "X with $npp_slot"
npp_slot = {
    'name' v:constant_attraction_name => new Slot('attraction-name', v);
    'type' v:constant_attraction_type => new Slot('attraction-type', v);
}

// npi: Noun-Phrase of Identity
// "X that is $npi_slot", where npi is a noun-phrase (not a passive-verb-phrase)
npi_slot = {
}

// prep: Preposition
// "X $prep_slot" or "X that <verb> $prep_slot" - where $prep_slot starts with a preposition
// eg. "train to cambridge"
prep_slot = {
    ( 'in the' v:constant_attraction_area
    | 'in the' v:constant_attraction_area 'area'
    | 'near the' v:constant_attraction_area 'area'
    | 'around the' v:constant_attraction_area 'area'
    ) => new Slot('attraction-area', v);
}

// pvp: Passive-Verb Phrase
// "X $pvp_slot" or "X that is $pvp_slot" - where $pvp_slot is a verb phrase in -ed or -ing form
// eg. "train leaving from cambridge"
// pvp_slot is also used for prepositional phrases
pvp_slot = {
    'called' v:constant_attraction_name => new Slot('attraction-name', v);
}

// avp: Active-Verb Phrase
// "X that $apv_slot" where $apv_slot is a verb phrase in active form, with X as subject
avp_slot = {
}

// apv: Adjective-Phrase Value
// "$apv_slot X" where $apv_slot is an adjective phrase
// e.g.: "cheap restaurant", "5-star hotel"
apv_slot = {
}
