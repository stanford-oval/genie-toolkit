// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//         Silei Xu <silei@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

// import thingpedia info
const _tpLoader = require('../load-thingpedia');
}

// these are autogenerated and depends on projection_*, which is also
// autogenerated
projection_Any = {}
stream_projection_Any = {}
table_join_replace_placeholder = {}
action_replace_param_with_table = {}
action_replace_param_with_stream = {}

projection_Numeric = {
    projection_Number;
    projection_Currency;
    projection_Measure_ms;
    projection_Measure_byte;
    projection_Measure_kg;
    projection_Measure_C;
    projection_Measure_m;
    projection_Measure_mps;
    projection_Measure_Pa;
    projection_Measure_kcal;
}

single_projection_String = table:complete_table => C.makeEventTableProjection(table);

single_stream_projection_String = !nostream 'new' table:complete_table => C.makeEventStreamProjection(table);

single_projection_Entity__tt__picture = table:complete_table => {
    if (!table.schema.out['picture_url'])
        return null;
    return new Ast.Table.Projection(null, table, ['picture_url'], table.schema);
};
single_stream_projection_Entity__tt__picture = !nostream 'new' table:complete_table => {
    if (!table.schema.out['picture_url'])
        return null;
    if (!table.schema.is_monitorable)
        return null;
    return new Ast.Stream.Projection(null, new Ast.Stream.Monitor(null, table, null, table.schema), ['picture_url'], table.schema);
};


the_out_param_Numeric = {
    'the' p:out_param_Numeric => p;
    !turking {
        'its' p:out_param_Numeric => p;
        'their' p:out_param_Numeric => p;
    }
}
the_out_param_Array__Any = {
    'the' p:out_param_Array__Any => p;
    !turking {
        'its' p:out_param_Array__Any => p;
        'their' p:out_param_Array__Any => p;
    }
}

the_out_param_pair = {
    'the' p1:out_param_Any 'and' p2:out_param_Any => {
        if (p1.name !== p2.name)
            return [p1, p2];
        return null;
    };
}

pair_projection = {
    ?projection_with_filter {
        ( ('both' | '') outParams:the_out_param_pair 'of' table:with_filtered_table
        | outParams:the_out_param_pair 'of the' table:with_arg_min_max_table
        ) => C.makeMultiFieldProjection('table', table, outParams);
    }
    !projection_with_filter {
        ('both' | '') outParams:the_out_param_pair 'of' table:complete_table => C.makeMultiFieldProjection('table', table, outParams);
    }
}

where_question = {
    ?projection_with_filter {
        ( 'where is the' table:with_filtered_table
        | 'where is the' table:with_arg_min_max_table
        ) => C.makeSingleFieldProjection('table', Type.Location, table, 'geo');
    }
    !projection_with_filter {
        'where is' table:complete_table => C.makeSingleFieldProjection('table', Type.Location, table, 'geo');
    }
}

for (let [typestr, type] of _tpLoader.types.all) {
    // don't access booleans or enums out arguments generically, as that rarely makes sense
    // (and when it does, you probably want a macro and maybe and edge trigger)
    if (!type.isEnum && !type.isBoolean) {
        $('the_out_param_' + typestr) = {
            'the' p:$('out_param_' + typestr) => p;

            /*!turking {
                'its' p:$('out_param_' + typestr) => p;
                'their' p:$('out_param_' + typestr) => p;
            }
            */
        }

        if (!_tpLoader.types.id.has(typestr)) {
            if (_tpLoader.flags.projection_with_filter) {
                $('projection_' + typestr) = outParam:$('the_out_param_' + typestr) 'of' table:with_filtered_table =>
                    C.makeSingleFieldProjection('table', type, table, outParam.name);
                $('projection_' + typestr) = outParam:$('the_out_param_' + typestr) 'of the' table:with_arg_min_max_table =>
                    C.makeSingleFieldProjection('table', type, table, outParam.name);
                $('stream_projection_' + typestr) = !nostream outParam:$('the_out_param_' + typestr) 'of new' table:with_filtered_table =>
                    C.makeSingleFieldProjection('stream', type, table, outParam.name);
                $('stream_projection_' + typestr) = !nostream outParam:$('the_out_param_' + typestr) 'of the new' table:with_arg_min_max_table =>
                    C.makeSingleFieldProjection('stream', type, table, outParam.name);
            } else {
                $('projection_' + typestr) = outParam:$('the_out_param_' + typestr) 'of' table:complete_table =>
                    C.makeSingleFieldProjection('table', type, table, outParam.name);
                $('stream_projection_' + typestr) = !nostream outParam:$('the_out_param_' + typestr) 'of new' table:complete_table =>
                    C.makeSingleFieldProjection('stream', type, table, outParam.name);
            }

            projection_Any = $('projection_' + typestr);
        }

        if (typestr !== 'Entity__tt__picture' && typestr !== 'String') {
            if (_tpLoader.flags.projection_with_filter) {
                $('single_projection_' + typestr) = table:with_filtered_table => C.makeTypeBasedTableProjection(table, type, typestr);

                $('single_stream_projection_' + typestr) = !nostream 'new' table:with_filtered_table =>
                    C.makeTypeBasedStreamProjection(table, type, typestr);
            } else {
                $('single_projection_' + typestr) = table:complete_table => C.makeTypeBasedTableProjection(table, type, typestr);

                $('single_stream_projection_' + typestr) = !nostream 'new' table:complete_table =>
                    C.makeTypeBasedStreamProjection(table, type, typestr);
            }
        }
    }
}

placeholder_Number = {
    'some number' => new Ast.Value.Undefined(true);
    'some value' => new Ast.Value.Undefined(true);
}
placeholder_String = {
    'something' => new Ast.Value.Undefined(true);
}
placeholder_Currency = {
    'some value' => new Ast.Value.Undefined(true);
    'some amount' => new Ast.Value.Undefined(true);
}
placeholder_Time = {
    'some time' => new Ast.Value.Undefined(true);
     'a certain time' => new Ast.Value.Undefined(true);
}
placeholder_Date = {
    'some date' => new Ast.Value.Undefined(true);
    'a certain date' => new Ast.Value.Undefined(true);
    'some time' => new Ast.Value.Undefined(true);
    'a certain time' => new Ast.Value.Undefined(true);
}
placeholder_Location = {
    'some location' => new Ast.Value.Undefined(true);
    'a location' => new Ast.Value.Undefined(true);
    'some place' => new Ast.Value.Undefined(true);
    'a place' => new Ast.Value.Undefined(true);
    'a certain place' => new Ast.Value.Undefined(true);
    'somewhere' => new Ast.Value.Undefined(true);
}
placeholder_Measure_ms   = {
    'some duration' => new Ast.Value.Undefined(true);
    'some amount of time' => new Ast.Value.Undefined(true);
}
placeholder_Measure_byte = {
    'some size' => new Ast.Value.Undefined(true);
    'a certain size' => new Ast.Value.Undefined(true);
}
placeholder_Measure_kg   = {
    'a certain weight' => new Ast.Value.Undefined(true);
}
placeholder_Measure_C    = {
    'a certain temperature' => new Ast.Value.Undefined(true);
}
placeholder_Measure_m    = {
    'some distance' => new Ast.Value.Undefined(true);
    'some length' => new Ast.Value.Undefined(true);
}
placeholder_Measure_mps  = {
    'some speed' => new Ast.Value.Undefined(true);
    'a certain speed' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__picture = {
    'some image' => new Ast.Value.Undefined(true);
    'some picture' => new Ast.Value.Undefined(true);
    'some photo' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__username = {
    'somebody' => new Ast.Value.Undefined(true);
    'someone' => new Ast.Value.Undefined(true);
    'some one' => new Ast.Value.Undefined(true);
    'some person' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__phone_number = {
    'somebody' => new Ast.Value.Undefined(true);
    'someone' => new Ast.Value.Undefined(true);
    'some one' => new Ast.Value.Undefined(true);
    'some person' => new Ast.Value.Undefined(true);
    'some number' => new Ast.Value.Undefined(true);
    'some phone number' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__email_address = {
    'somebody' => new Ast.Value.Undefined(true);
    'someone' => new Ast.Value.Undefined(true);
    'some one' => new Ast.Value.Undefined(true);
    'some person' => new Ast.Value.Undefined(true);
    'some email address' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__path_name = {
    'some file' => new Ast.Value.Undefined(true);
    'some directory' => new Ast.Value.Undefined(true);
    'some folder' => new Ast.Value.Undefined(true);
}
placeholder_Entity__tt__url = {
    'some url' => new Ast.Value.Undefined(true);
    'some website' => new Ast.Value.Undefined(true);
    'some link' => new Ast.Value.Undefined(true);
}

for (let [pname, [typestr, pcanonical]] of _tpLoader.params.in.values()) {
    if (typestr.startsWith('Enum__')) {
        // replace $-placeholders with "some X" where X is based on parameter name
        if (pname !== 'power' && pname !== 'state' && pname !== 'p_power' && pname !== 'p_state') {
            thingpedia_query = q:thingpedia_query #('a certain ' + pcanonical) [-> pname { isUndefined: true }] =>
                C.replacePlaceholderWithUndefined(q, pname, typestr);

            thingpedia_get_command = q:thingpedia_get_command #('a certain ' + pcanonical) [-> pname { isUndefined: true }] =>
                C.replacePlaceholderWithUndefined(q, pname, typestr);

            thingpedia_stream = s:thingpedia_stream #('a certain ' + pcanonical) [-> pname { isUndefined: true }] =>
                C.replacePlaceholderWithUndefined(s, pname, typestr);

            thingpedia_action = a:thingpedia_action #('a certain ' + pcanonical) [-> pname { isUndefined: true }] =>
                C.replacePlaceholderWithUndefined(a, pname, typestr);

            thingpedia_program = p:thingpedia_program #('a certain ' + pcanonical) [-> pname { isUndefined: true }] =>
                C.replacePlaceholderWithUndefined(p, pname, typestr);
        }
    }

    // don't parameter pass booleans or enums, as that rarely makes sense
    if (typestr !== 'Boolean' && !typestr.startsWith('Enum__')) {
        if (pname !== 'count' && pname !== 'p_count') {
            if (_tpLoader.flags.undefined_filter) {
                // replace $-placeholders with "some X" where X is based on parameter name
                thingpedia_query = q:thingpedia_query #('some ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(q, pname, typestr);

                thingpedia_get_command = q:thingpedia_get_command #('some ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(q, pname, typestr);

                thingpedia_stream = s:thingpedia_stream #('some ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(s, pname, typestr);

                thingpedia_action = a:thingpedia_action #('some ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(a, pname, typestr);

                thingpedia_program = p:thingpedia_program #('some ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(p, pname, typestr);
            }
        }

        // replace $-placeholders with projection-based parameter passing

        table_join_replace_placeholder = q:thingpedia_query p:$('single_projection_' + typestr) [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
        action_replace_param_with_table = a:thingpedia_action p:$('single_projection_' + typestr) [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
        action_replace_param_with_stream = a:thingpedia_action p:$('single_stream_projection_' + typestr) [-> pname] => C.actionReplaceParamWithStream(a, pname, p);

        if (_tpLoader.types.id.has(typestr)) {
            forward_get_do_command = command:forward_get_do_command ('it' | 'that' | 'them') [-> pname] => {
                for (let joinArg in command.table.schema.out) {
                    if (typestr === C.typeToStringSafe(command.table.schema.out[joinArg]))
                        return C.getDoCommand(command, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };

            forward_when_do_rule = rule:forward_when_do_rule ('it' | 'that' | 'them') [-> pname] => {
                for (let joinArg in rule.stream.schema.out) {
                    if (typestr === C.typeToStringSafe(rule.stream.schema.out[joinArg]))
                        return C.whenDoRule(rule, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };

            when_get_stream = stream:when_get_stream ('it' | 'that' | 'them') [-> pname] => {
                for (let joinArg in stream.stream.schema.out) {
                    if (typestr === C.typeToStringSafe(stream.stream.schema.out[joinArg]))
                        return C.whenGetStream(stream, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };
        } else {
            table_join_replace_placeholder = q:thingpedia_query p:$('projection_' + typestr) [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
            action_replace_param_with_table = a:thingpedia_action p:$('projection_' + typestr) [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
            action_replace_param_with_stream = a:thingpedia_action p:$('stream_projection_' + typestr) [-> pname] => C.actionReplaceParamWithStream(a, pname, p);

            forward_get_do_command = !turking command:forward_get_do_command p:$('the_out_param_' + typestr) [-> pname] => C.getDoCommand(command, pname, p);
            backward_get_do_command = !turking command:backward_get_do_command p:$('the_out_param_' + typestr) [-> pname] => C.getDoCommand(command, pname, p);
            forward_when_do_rule = !turking rule:forward_when_do_rule p:$('the_out_param_' + typestr) [-> pname] => C.whenDoRule(rule, pname, p);
            backward_when_do_rule = !turking rule:backward_when_do_rule p:$('the_out_param_' + typestr) [-> pname] => C.whenDoRule(rule, pname, p);
            when_get_stream = !turking stream:when_get_stream p:$('the_out_param_' + typestr) [-> pname] => C.whenGetStream(stream, pname, p);
        }

        if (pname === 'p_picture_url') {
            forward_get_do_command = command:forward_get_do_command ('it' | 'that' | 'them') [-> pname] => C.getDoCommand(command, pname, new Ast.Value.VarRef('picture_url'));
            forward_when_do_rule = rule:forward_when_do_rule ('it' | 'that' | 'them') [-> pname] => C.whenDoRule(rule, pname, new Ast.Value.VarRef('picture_url'));
            when_get_stream = stream:when_get_stream ('it' | 'that' | 'them') [-> pname] => C.whenGetStream(stream, pname, new Ast.Value.VarRef('picture_url'));
        }

        if (typestr === 'String' && ['p_body', 'p_message', 'p_caption', 'p_status', 'p_text'].indexOf(pname) >= 0) {
            forward_get_do_command = command:forward_get_do_command ('it' | 'that' | 'them') [-> pname] => {
                for (let pname in command.table.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = command.table.schema.out[pname];
                    if (_tpLoader.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.getDoCommand(command, pname, new Ast.Value.Event(null));
            };

            forward_when_do_rule = rule:forward_when_do_rule ('it' | 'that' | 'them') [-> pname] => {
                for (let pname in rule.stream.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = rule.stream.schema.out[pname];
                    if (_tpLoader.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.whenDoRule(rule, pname, new Ast.Value.Event(null));
            };

            when_get_stream = stream:when_get_stream ('it' | 'that' | 'them') [-> pname] => {
                for (let pname in stream.stream.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = stream.stream.schema.out[pname];
                    if (_tpLoader.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.whenGetStream(stream, pname, new Ast.Value.Event(null));
            };
        }
    }
}
