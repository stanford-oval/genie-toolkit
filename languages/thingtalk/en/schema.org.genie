// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

const _tpLoader = require('../load-thingpedia');
}

schema_with_filtered_table_join = {
    // get-predicate form of join
    table:with_filtered_table ('with' | 'having' | 'that has' | 'that have' | 'which has' | 'which have') get_predicate_table:with_filtered_table
        => C.addGetPredicateJoin(table, get_predicate_table, null, _tpLoader);

    ( table:with_filtered_table 'with' p:out_param_Any get_predicate_table:with_filtered_table
    | table:with_filtered_table p:out_param_pvp get_predicate_table:with_filtered_table
    | table:with_filtered_table ('who' | 'which' | 'that') p:out_param_avp get_predicate_table:with_filtered_table
    ) => C.addGetPredicateJoin(table, get_predicate_table, p.name, _tpLoader);

    // join form of join

    rhs:with_filtered_table ('of' | 'for' | 'in') lhs:with_filtered_table
        => C.addArrayJoin(lhs, rhs, _tpLoader);

    !turking lhs:with_filtered_table '\'s' rhs:with_filtered_table
        => C.addArrayJoin(lhs, rhs, _tpLoader);
}

schema_have_filtered_table_join = {
    // get-predicate form of join
    table:verb_filtered_table ('and' | 'and have' | 'and also' | 'and in addition' | 'but also') get_predicate_table:with_filtered_table
        => C.addGetPredicateJoin(table, get_predicate_table, null, _tpLoader);
}
