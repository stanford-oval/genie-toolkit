// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

{
    const assert = require('assert');

    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;
    const Generate = ThingTalk.Generate;

// import the combinator library
    const C = require('../ast_manip');
    const _tpLoader = require('../load-thingpedia');

    const HERE = new Ast.Value.Location(new Ast.Location.Relative('current_location'));
}


projection_Measure_m = {}
compute_question = {}
with_arg_min_max_table = {}

// within distance
one_within_filter_table = {
    !turking {
        !nofilter table:complete_table filter:within_filter
        => C.makeWithinGeoDistanceExpression(table, filter.place, filter.distance);
    }
}

two_within_filter_table = {
    !turking {
        !nofilter (
              table:one_with_filter_table filter:within_filter
            | table:one_which_filter_table filter:within_filter
            | table:one_clean_filter_table filter:within_filter
        ) => C.makeWithinGeoDistanceExpression(table, filter.place, filter.distance);
    }
}

three_within_filter_table = {
    !turking {
        !nofilter (
              table:two_with_filter_table filter:within_filter
            | table:two_which_filter_table filter:within_filter
            | table:two_clean_filter_table filter:within_filter
        ) => C.makeWithinGeoDistanceExpression(table, filter.place, filter.distance);
    }
}

projection_Measure_m = {
    !turking {
        ( 'the distance' ('of' | 'to') table:with_filtered_table ('from here' | '')
        | 'the distance' ('of' | 'to') 'the' table:with_arg_min_max_table ('from here' | ''))=> {
            // the position of a place in schema.org is called "geo" - for speed
            // we hardcode the parameter name here

            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
        };

        // these form sentences like "tell me how far X is", which is grammatical but
        // clunky, so we !turking them
        !turking ( 'how' ('far' | 'near' | 'close') table:with_filtered_table 'is' ('from here' | '')
        | 'how' ('far' | 'near' | 'close') 'the' table:with_arg_min_max_table 'is' ('from here' | '')
        ) => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
        };

        ( 'the distance' ('of' | 'to') table:with_filtered_table 'from' place:constant_Location
        | 'the distance from' place:constant_Location ('of' | 'to') table:with_filtered_table
        | 'the distance' ('of' | 'to') 'the' table:with_arg_min_max_table 'from' place:constant_Location
        | 'the distance from' place:constant_Location ('of' | 'to') 'the' table:with_arg_min_max_table
        ) => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'));
        };

        !turking {
        ( 'how' ('far' | 'near' | 'close') 'from' place:constant_Location table:with_filtered_table 'is'
        | 'how' ('far' | 'near' | 'close') table:with_filtered_table 'is from' place:constant_Location
        | 'how' ('far' | 'near' | 'close') 'from' place:constant_Location 'the' table:with_arg_min_max_table 'is'
        | 'how' ('far' | 'near' | 'close') 'the' table:with_arg_min_max_table 'is from' place:constant_Location
        ) => {
            if (!table.schema.out.geo || table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'));
        };
        }

        ( 'the number of' p:out_param_Array__Any ('of' | 'in' | 'in the') table:with_filtered_table
        | 'the number of' p:out_param_Array__Any ('of' | 'in') 'the' table:with_arg_min_max_table ) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const conflictParam = C.hasConflictParam(table, p.name, 'count');
            if (conflictParam)
                return C.makeProjection(table, conflictParam);
            return C.makeAggComputeProjExpression(table, 'count', null, p, Type.Number);
        };

        ( 'the number of' p:out_param_Array__Any 'with' filter:with_filter ('of' | 'in' | 'in the') table:with_filtered_table
        | 'the number of' p:out_param_Array__Any 'with' filter:with_filter ('of' | 'in') 'the' table:with_arg_min_max_table) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray || filter.isAtom)
                return null;
            const elementType = table.schema.out[p.name].elem;
            if (!elementType.isCompound || !elementType.fields[filter.name])
                return null;
            const list = C.makeListExpression(_tpLoader, p, filter);
            if (!list)
                return null;
            return C.makeAggComputeProjExpression(table, 'count', null, list, Type.Number);
        };

        ( 'the number of' p:out_param_ArrayCount ('of' | 'in' | 'in the') table:with_filtered_table
        | 'the number of' p:out_param_ArrayCount ('of' | 'in') 'the' table:with_arg_min_max_table ) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isNumber)
                return null;
            return C.makeProjection(table, p.name);
        };
    }
}

compute_question = {
    !turking {
        ( 'how' ('far' | 'near' | 'close') ('is' | 'are') table:with_filtered_table ('from here' | '') ('?'|'')
        | 'how' ('far' | 'near' | 'close') ('is' | 'are') 'the' table:with_arg_min_max_table ('from here' | '') ('?'|'')
        )=> {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
        };

        ( 'how' ('far' | 'near' | 'close') ('is' | 'are') table:with_filtered_table ('from' | 'to') place:constant_Location ('?'|'')
        | 'how' ('far' | 'near' | 'close') ('is' | 'are') 'the' table:with_arg_min_max_table ('from' | 'to') place:constant_Location ('?'|'')
        ) => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeProjExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'));
        };

        ( 'how many' p:out_param_ArrayCount ('does' | 'do') table:with_filtered_table 'have ?'
        | 'how many' p:out_param_ArrayCount ('in a' | 'in' | 'in the') table:with_filtered_table '?'
        | 'how many' p:out_param_ArrayCount 'are there' ('in a' | 'in' | 'in the') table:with_filtered_table '?'

        | 'how many' p:out_param_ArrayCount ('does' | 'do') 'the' table:with_arg_min_max_table 'have ?'
        | 'how many' p:out_param_ArrayCount 'in the' table:with_arg_min_max_table '?'
        | 'how many' p:out_param_ArrayCount 'are there in the' table:with_arg_min_max_table '?'
        ) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isNumber)
                return null;
            return C.makeProjection(table, p.name);
        };

        ( 'how many' p:out_param_Array__Any ('does' | 'do') table:with_filtered_table 'have ?'
        | 'how many' p:out_param_Array__Any ('in a' | 'in' | 'in the') table:with_filtered_table '?'
        | 'how many' p:out_param_Array__Any 'are there' ('in a' | 'in' | 'in the') table:with_filtered_table '?'

        | 'how many' p:out_param_Array__Any ('does' | 'do') 'the' table:with_arg_min_max_table 'have ?'
        | 'how many' p:out_param_Array__Any 'in the' table:with_arg_min_max_table '?'
        | 'how many' p:out_param_Array__Any 'are there in the' table:with_arg_min_max_table '?'
        ) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const conflictParam = C.hasConflictParam(table, p.name, 'count');
            if (conflictParam)
                return C.makeProjection(table, conflictParam);
            return C.makeAggComputeProjExpression(table, 'count', null, p, Type.Number);
        };

        !dialogues {
        ( 'how many' p:out_param_Array__Any 'with' filter:with_filter ('does' | 'do') table:with_filtered_table 'have ?'
        | 'how many' p:out_param_Array__Any 'with' filter:with_filter ('in a' | 'in' | 'in the') table:with_filtered_table '?'
        | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'are there' ('in a' | 'in' | 'in the') table:with_filtered_table '?'

        | 'how many' p:out_param_Array__Any 'with' filter:with_filter ('does' | 'do') 'the'  table:with_arg_min_max_table 'have ?'
        | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'in the' table:with_arg_min_max_table '?'
        | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'are there in the' table:with_arg_min_max_table '?'
        ) => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const elementType = table.schema.out[p.name].elem;
            if (!elementType.isCompound || !elementType.fields[filter.name])
                return null;
            const list = C.makeListExpression(_tpLoader, p, filter);
            if (!list)
                return null;
            return C.makeAggComputeProjExpression(table, 'count', null, list, Type.Number);
        };
        }

        // aggregation questions
        ?aggregation {
        ( 'how many' table:with_filtered_table 'are there ?'
        | ('please' | '') 'count the' table:with_filtered_table
        ) => {
            if (!table.schema.is_list)
                return null;
            const newSchema = table.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT)
                .addArguments([new Ast.ArgumentDef(null, Ast.ArgDirection.OUT, 'count', Type.Number)]);
            const agg = new Ast.Table.Aggregation(null, table, '*', 'count', null, newSchema);
            return new Ast.Table.Projection(null, agg, ['count'], newSchema);
        };


        !schema_org ( 'how many' p:out_param_Numeric 'are' ('in' | 'in the') t:with_filtered_table '?'
        | 'how many' p:out_param_Numeric ('do' | 'does') t:with_filtered_table 'have ?'
        ) => {
            if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
                return null;
            if (!t.schema.is_list)
                return null;

            const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
            const agg = new Ast.Table.Aggregation(null, t, p.name, 'sum', null, newSchema);
            return new Ast.Table.Projection(null, agg, [p.name], newSchema);
        };
        }
    }
}

with_arg_min_max_table = {
    !turking {
        ('nearest' | 'closest') table:complete_table ('' | 'from here' | 'to here' | 'to me')  => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'asc');
        };

        ('nearest' | 'closest') table:with_filtered_table => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'asc');
        };

        ('farthest' | 'most far away') table:with_filtered_table => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'desc');
        };

        ( ('nearest' | 'closest') table:complete_table 'to' place:constant_Location
        | table:complete_table ('that is' | 'which is') ('nearest' | 'closest') 'to' place:constant_Location
        | table:complete_table ('nearest' | 'closest') 'to' place:constant_Location
        ) => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'asc');
        };

        ( ('nearest' | 'closest') table:with_filtered_table 'to' place:constant_Location
        | table:with_filtered_table ('that is' | 'which is') ('nearest' | 'closest') 'to' place:constant_Location
        | table:with_filtered_table ('nearest' | 'closest') 'to' place:constant_Location
        ) => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'asc');
        };

        ( ('farthest' | 'most far away') table:with_filtered_table 'from' place:constant_Location
        | table:with_filtered_table ('that is' | 'which is') ('farthest' | 'most far away') 'from' place:constant_Location
        | table:with_filtered_table ('farthest' | 'most far away') 'from' place:constant_Location )
        => {
            if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
                return null;
            return C.makeComputeArgMinMaxExpression(table, 'distance', [new Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'desc');
        };

        table:with_filtered_table 'with the' ('most' | 'highest number of' | 'largest number of' | 'largest count of') p:out_param_Array__Any [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const conflictParam = C.hasConflictParam(table, p.name, 'count');
            if (conflictParam)
                return C.makeArgMaxMinTable(table, conflictParam, 'desc');
            return C.makeAggComputeArgMinMaxExpression(table, 'count', null, p, Type.Number, 'desc');
        };
        !turking table:with_filtered_table 'with the' ('least' | 'fewest' | 'smallest number of' | 'tiniest number of' | 'smallest count of') p:out_param_Array__Any [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const conflictParam = C.hasConflictParam(table, p.name, 'count');
            if (conflictParam)
                return C.makeArgMaxMinTable(table, conflictParam, 'asc');
            return C.makeAggComputeArgMinMaxExpression(table, 'count', null, p, Type.Number, 'asc');
        };
        ?turking table:with_filtered_table 'with the' ('fewest' | 'smallest number of') p:out_param_Array__Any [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
                return null;
            const conflictParam = C.hasConflictParam(table, p.name, 'count');
            if (conflictParam)
                return C.makeArgMaxMinTable(table, conflictParam, 'asc');
            return C.makeAggComputeArgMinMaxExpression(table, 'count', null, p, Type.Number, 'asc');
        };

        table:with_filtered_table 'with the' ('most' | 'highest number of' | 'largest number of' | 'largest count of') p:out_param_ArrayCount [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isNumber)
                return null;
            return C.makeArgMaxMinTable(table, p.name, 'desc');
        };
        !turking table:with_filtered_table 'with the' ('least' | 'fewest' | 'smallest number of' | 'tiniest number of' | 'smallest count of') p:out_param_ArrayCount [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isNumber)
                return null;
            return C.makeArgMaxMinTable(table, p.name, 'asc');
        };
        ?turking table:with_filtered_table 'with the' ('fewest' | 'smallest number of') p:out_param_ArrayCount [weight=0.33] => {
            if (!table.schema.out[p.name] || !table.schema.out[p.name].isNumber)
                return null;
            return C.makeArgMaxMinTable(table, p.name, 'asc');
        };
    }
}


