// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Coref question templates: questions about the current result, referred by coreference ("it", "that", "the restaurant")

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;

    const C = require('../../ast_manip');
    const D = require('../../dialogue_acts');

    // import thingpedia info
    const _tpLoader = require('../../load-thingpedia');
}

// questions with "it"/"that" -- coreference on a single result

// this is the almost the same as a plain out_param_list, but we drop the wrapper
// VarRef and return a list of strings
out_param_list_for_coref_question = {
    p1:out_param_Any 'and' p2:out_param_Any => {
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        return [p1.name, p2.name];
    };

    p1:out_param_Any ',' p2:out_param_Any (',' | '') 'and' p3:out_param_Any=> {
        if (p1.name === 'id' || p2.name === 'id' || p3.name === 'id')
            return null;
        if (p1.name === p2.name || p2.name === p3.name || p1.name === p3.name)
            return null;
        return [p1.name, p2.name, p3.name];
    };
}

simple_user_search_question = {
    // straight up questions
    ( ('can you tell me' | '') 'what is' ('the' | 'its') param:out_param_Any '?'
    | 'can you tell me' ('the' | 'its') param:out_param_Any '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does it have ?'
    | 'i would like to' ('know' | 'see') ('the' | 'its') param:out_param_Any ('first' | '') '.'
    | 'i need' ('the' | 'its') param:out_param_Any ('first' | '') '.'
    | 'i just need' ('the' | 'its') param:out_param_Any '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [[param.name, null]];
    };

    ( ('can you tell me' | '') 'what' ('is' | 'are') ('the' | 'its') params:out_param_list_for_coref_question '?'
    | 'can you tell me' ('the' | 'its') params:out_param_list_for_coref_question '?'
    | 'i would like to' ('know' | 'see') ('the' | 'its') params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i need' ('the' | 'its') params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i just need' ('the' | 'its') params:out_param_list_for_coref_question '.'
    ) => params.map((pname) => [pname, null]);

    ( ('can you tell me' | '') 'what is' 'the' param:out_param_Any 'of the' base:base_table '?'
    | 'can you tell me' 'the' param:out_param_Any 'of the' base:base_table '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does the' base:base_table 'have ?'
    | 'i would like to' ('know' | 'see') 'the' param:out_param_Any 'of the' base:base_table ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' param:out_param_Any 'of the' base:base_table '.'

    | ('can you tell me' | '') 'what is' 'the' base:base_table '\'s' param:out_param_Any '?'
    | 'can you tell me' 'the' base:base_table '\'s' param:out_param_Any '?'
    | 'i would like to' ('know' | 'see') 'the' base:base_table '\'s' param:out_param_Any ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' base:base_table '\'s' param:out_param_Any '.'
    ) => {
        if (!base.schema.out[param.name])
            return null;
        if (param.name === 'id')
            return null;
        return [[param.name, null]];
    };

    ( ('can you tell me' | '') 'what' ('is' | 'are') 'the' params:out_param_list_for_coref_question 'of the' base:base_table '?'
    | 'can you tell me' 'the' params:out_param_list_for_coref_question 'of the' base:base_table '?'
    | ('can you tell me' | '') 'what' params:out_param_list_for_coref_question 'does the' base:base_table 'have ?'
    | 'i would like to' ('know' | 'see') 'the' params:out_param_list_for_coref_question 'of the' base:base_table ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' params:out_param_list_for_coref_question 'of the' base:base_table '.'

    | ('can you tell me' | '') 'what is' 'the' base:base_table '\'s' params:out_param_list_for_coref_question '?'
    | 'can you tell me' 'the' base:base_table '\'s' params:out_param_list_for_coref_question '?'
    | 'i would like to' ('know' | 'see') 'the' base:base_table '\'s' params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i just need' ('the' | 'its') 'the' base:base_table '\'s' params:out_param_list_for_coref_question '.'
    ) => {
        if (!params.every((pname) => !!base.schema.out[pname]))
            return null;
        return params.map((pname) => [pname, null]);
    };
}

simple_user_search_question_for_list = {
    // straight up questions
    ( ('can you tell me' | '') 'what are' ('the' | 'their') param:out_param_Any '?'
    | 'can you tell me' ('the' | 'their') param:out_param_Any '?'
    | 'can you tell me' 'the' param:out_param_Any ('for both of them' | 'for all of them') '?'
    | ('can you tell me' | '') 'what' param:out_param_Any 'does it have ?'
    | 'i would like to' ('know' | 'see') ('both of' | '') ('the' | 'their') param:out_param_Any ('first' | '') '.'
    | 'i need' ('the' | 'their') param:out_param_Any ('first' | '') '.'
    | 'i just need' ('the' | 'their') param:out_param_Any '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [[param.name, null]];
    };
}

boolean_user_search_question = {
    // question in boolean
    ( 'does' ('that' | 'it') 'have' param:npp_filter '?'
    | 'does' ('that' | 'it') param:avp_filter '?'
    ) => {
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]];
    };

    ( 'is' ('it' | 'that') 'a' param:apv_filter base:base_table '?'
    | 'is that' base:base_table param:apv_filter '?'

    | 'is' ('it' | 'that') 'a' base:base_table param:pvp_filter '?'
    | 'is that' base:base_table param:pvp_filter '?'

    | 'is' ('it' | 'that') 'a' base:base_table param:preposition_filter '?'
    | 'is that' base:base_table param:preposition_filter '?'

    | 'is' ('it' | 'that') 'a' base:base_table ('that' | 'which') param:avp_filter '?'
    | 'does that' base:base_table param:avp_filter '?'

    | 'is' ('it' | 'that') 'a' base:base_table ('that has' | 'with') param:npp_filter '?'
    | 'does that' base:base_table 'have' param:npp_filter '?'
    ) => {
        if (!C.checkFilter(base, param))
            return null;
        if (!base.schema.is_list)
            return null;
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]];
    };
}

boolean_user_search_question_for_list = {
    // question in boolean
    ( ('does either of them' | 'does any of them' | 'do they') 'have' param:npp_filter '?'
    | ('does either of them' | 'does any of them' | 'do they') param:avp_filter '?'
    ) => {
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]];
    };

    ( ('is either of them' | 'is any of them' | 'are they') 'a' param:apv_filter base:base_table '?'
    | 'are those' base:base_table param:apv_filter '?'

    | ('is either of them' | 'is any of them' | 'are they') 'a' base:base_table param:pvp_filter '?'
    | 'are those' base:base_table param:pvp_filter '?'

    | ('is either of them' | 'is any of them' | 'are they')  'a' base:base_table param:preposition_filter '?'
    | 'are those' base:base_table param:preposition_filter '?'

    | ('is either of them' | 'is any of them' | 'are they')  'a' base:base_table ('that' | 'which') param:avp_filter '?'
    | 'do those' base:base_table param:avp_filter '?'

    | ('is either of them' | 'is any of them' | 'are they')  'a' base:base_table ('that has' | 'with') param:npp_filter '?'
    | 'do those' base:base_table 'have' param:npp_filter '?'
    ) => {
        if (!C.checkFilter(base, param))
            return null;
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]];
    };
}

// questions by name (when in an list)

user_search_question_with_name = {
    // straight up questions
    ( ('can you tell me' | '') 'what is' name:constant_name '\'s' param:out_param_Any '?'
    | ('can you tell me' | '') 'what is' 'the' param:out_param_Any 'of' name:constant_name '?'
    | 'can you tell me' name:constant_name '\'s' param:out_param_Any '?'
    | 'can you tell me' 'the' param:out_param_Any 'of' name:constant_name '?'
    | 'i would like to' ('know' | 'see') name:constant_name '\'s' param:out_param_Any ('first' | '') '.'
    | 'i would like to' ('know' | 'see') 'the' param:out_param_Any 'of' name:constant_name ('first' | '') '.'
    ) => {
        if (param.name === 'id')
            return null;
        return [name, [[param.name, null]]];
    };

    // straight up questions
    ( ('can you tell me' | '') 'what is' name:constant_name '\'s' params:out_param_list_for_coref_question '?'
    | ('can you tell me' | '') 'what is' 'the' params:out_param_list_for_coref_question 'of' name:constant_name '?'
    | 'can you tell me' name:constant_name '\'s' params:out_param_list_for_coref_question '?'
    | 'can you tell me' 'the' params:out_param_list_for_coref_question 'of' name:constant_name '?'
    | 'i would like to' ('know' | 'see') name:constant_name '\'s' params:out_param_list_for_coref_question ('first' | '') '.'
    | 'i would like to' ('know' | 'see') 'the' params:out_param_list_for_coref_question 'of' name:constant_name ('first' | '') '.'
    ) => {
        return [name, params.map((pname) => [pname, null])];
    };
}

boolean_user_search_question_with_name = {
    // question in boolean
    ( 'does' name:constant_name 'have' param:npp_filter '?'
    | 'does' name:constant_name param:avp_filter '?'
    | 'is' name:constant_name param:apv_filter '?'
    | 'is' name:constant_name param:pvp_filter '?'
    | 'is' name:constant_name param:preposition_filter '?'
    ) => {
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [name, [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]]];
    };

    ( 'is' name:constant_name 'a' param:apv_filter base:base_table '?'
    | 'is' name:constant_name 'a' base:base_table param:pvp_filter '?'
    | 'is' name:constant_name 'a' base:base_table param:preposition_filter '?'
    | 'is' name:constant_name 'a' base:base_table ('that' | 'which') param:avp_filter '?'
    | 'is' name:constant_name 'a' base:base_table ('that has' | 'with') param:npp_filter '?'
    ) => {
        if (!C.checkFilter(base, param))
            return null;
        const idArg = base.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        if (!(param instanceof Ast.BooleanExpression.Atom)) {
            assert(param instanceof Ast.BooleanExpression.And);
            assert(param.operands.length === 2 && param.operands[0] instanceof Ast.BooleanExpression.Atom
                   && param.operands[1] instanceof Ast.BooleanExpression.Atom);
            assert(param.operands[0].name === param.operands[1].name &&
                   param.operands[0].value.getType().equals(param.operands[1].value.getType()));
            return [[param.operands[0].name, param.operands[0].value.getType()]];
        }
        if (param.name === 'id')
            return null;
        return [name, [[param.name, param.operator === 'contains' ? new Type.Array(param.value.getType()) : param.value.getType()]]];
    };
}

user_search_question = {
    ('no ,' | '') questions:simple_user_search_question => questions;
    ('no ,' | '') questions:thingpedia_user_question '?' [weight=0.3] => questions;
    questions:boolean_user_search_question => questions;
}

user_search_question_for_list = {
    questions:simple_user_search_question => [null, questions];
    questions:simple_user_search_question_for_list => [null, questions];
    questions:boolean_user_search_question_for_list => [null, questions];

    user_search_question_with_name;
    boolean_user_search_question_with_name;
}
