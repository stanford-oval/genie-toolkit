// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Recommendation templates: the agent reads out or describe the top result from the search,
// optionally proposing an action to do on it

// A recommendation from the system is followed by:
// - yes (= "positive_recommendation_reply_pair")
// - some form of search refinement (= "negative_recommendation_reply_pair")
// - a question (= "recommendation_search_question_pair")
// - closing the dialogue (= "recommendation_cancel_pair")

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;

    const C = require('../../ast_manip');
    const D = require('../../dialogue_acts');

    // import thingpedia info
    const _tpLoader = require('../../load-thingpedia');
}

question_system_recommendation_short = {
    ctx:ctx_with_result_and_action 'how about' proposal:constant_name
        => D.makeRecommendation(ctx, proposal);
}

action_recommendation = {
    ctx:ctx_with_result_and_action ('would you like to' | 'would you like me to') action:contextual_action_phrase if complete [weight=0.1]
        => D.makeActionRecommendation(ctx, action);
}

actionable_system_recommendation_short = {
    ctx:ctx_with_result_noquestion proposal:thingpedia_result if complete [priority=2]
        => D.makeThingpediaRecommendation(ctx, proposal);
    ctx:ctx_with_result_noquestion proposal:thingpedia_result if complete [priority=2]
        => D.makeThingpediaRecommendation(ctx, proposal);

    ( ctx:ctx_with_result_and_action 'i' ('recommend' | 'suggest') proposal:constant_name
    | ctx:ctx_with_result_noquestion ('i see' | 'i have' | 'i have found' | 'i have one , it is') proposal:constant_name
    | ctx:ctx_with_result_argminmax 'the answer is' proposal:constant_name
    ) => D.makeRecommendation(ctx, proposal);

    // these are tagged with ?inference because they use a lot of non-terminals in a single templates
    // which makes them too slow at training time
    ?inference {
        ctx:ctx_with_result_argminmax 'the' base:base_table 'with the highest' param:out_param_Any 'is' proposal:constant_name [priority=1]
            => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'desc');
        ctx:ctx_with_result_argminmax 'the' base:base_table 'with the lowest' param:out_param_Any 'is' proposal:constant_name [priority=1]
            => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'asc');

        ctx:ctx_with_result_argminmax 'the' argminmax:apv_argminmax base:base_table 'is' proposal:constant_name [priority=2]
            => D.makeArgMinMaxRecommendation(ctx, proposal, base, argminmax[0], argminmax[1]);
    }
}

recommendation_info_action_pair = {
    'is a' info:result_info_phrase '.' action:action_coref_recommendation [weight=0.8] => {
        const resultType = info.schema.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [info, action];
    };

    'is a' info:result_info_phrase '.' learn_more_offer [weight=0.2] => {
        return [info, null];
    };
}

user_question_answer_begin = {
    ctx:ctx_with_result_question proposal:constant_name
        => D.makeRecommendation(ctx, proposal);
}

direct_user_question_answer = {
    ctx:ctx_with_result_question info:direct_result_info_phrase
        => D.makeThingpediaRecommendation(ctx, info);
}

proposal_info_action_pair = {
    'is a' info:result_info_phrase '.' action:action_coref_recommendation [weight=0.8] => {
        const resultType = info.schema.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [info, action];
    };

    !inference {
        'is a' info:result_info_phrase '.' learn_more_offer [weight=0.2] => {
            return [info, null];
        };
    }
}

actionable_system_display_result_short = {
    ctx:ctx_with_result info:thingpedia_result '.' if complete [priority=10]
        => D.makeDisplayResult(ctx, info);
}

// a non-list result
system_nonlist_result = {
    actionable_system_display_result_short;

    ctx:ctx_with_result info:direct_result_info_phrase
        => D.makeDisplayResult(ctx, info);
    phrase:actionable_system_display_result_short extra:direct_result_info_phrase
        => D.combineDisplayResult(phrase, extra);

    // TODO: offer an action on the result (needs non-ID parameter passing to be useful)
    //proposal:actionable_system_display_result_short action:action_coref_recommendation
    //    => D.checkActionForDisplayResult(proposal, action);

    ?anything_else proposal:actionable_system_display_result_short anything_else_phrase => {
        const clone = {};
        Object.assign(clone, proposal);
        clone.hasAnythingElse = true;
        return clone;
    };
}

// a recommendation consists of the first result of the current query,
// and action to do with it
// the action can come from the context (if the user expressed it earlier), or it can
// be offered immediately
system_recommendation = {
    ( ctx_with_action proposal:question_system_recommendation_short '.'
    | ctx_with_action proposal:actionable_system_recommendation_short '.'
    ) => proposal;

    ctx_with_action proposal:actionable_system_recommendation_short '.' learn_more_offer => {
        // reset the action to null if the agent explicitly asks to "learn more"
        const { topResult, info } = proposal;
        return { hasLearnMore: true, topResult, info, action: null };
    };

    ctx_without_projection proposal:action_recommendation => proposal;
    ctx_without_projection proposal:actionable_system_recommendation_short action:action_coref_recommendation
        => D.checkActionForRecommendation(proposal, action);

    // recommendations after a search
    ( proposal:question_system_recommendation_short '?' 'it is a' info:result_info_phrase '.'
    | proposal:action_recommendation '?' 'it is a' info:result_info_phrase '.'
    | proposal:actionable_system_recommendation_short '.' 'it is a' info:result_info_phrase '.'
    | proposal:question_system_recommendation_short ', which is a' info:result_info_phrase '?'
    | proposal:action_recommendation ', which is a' info:result_info_phrase '?'
    | proposal:actionable_system_recommendation_short ', which is a' info:result_info_phrase '.'
    ) => D.checkRecommendation(proposal, info);

    // long-form answers to a single question
    proposal:user_question_answer_begin 'is a' info:result_info_phrase '.'
        => D.checkRecommendation(proposal, info);

    // short answers to a single question
    ( proposal:user_question_answer_begin filter:avp_filter '.'
    | proposal:user_question_answer_begin 'is' filter:pvp_filter '.'
    | proposal:user_question_answer_begin 'is' filter:apv_filter '.'
    | proposal:user_question_answer_begin 'has' filter:npp_filter '.'
    ) => D.makeAnswerStyleRecommendation(proposal, filter);

    // even shorter answers to single questions
    direct_user_question_answer;

    // recommendations after a search, followed by an offer to make an action
    ( proposal:actionable_system_recommendation_short '. it' pair:proposal_info_action_pair [weight=2]
    | proposal:user_question_answer_begin pair:proposal_info_action_pair [weight=2]
    ) => {
        const [info, action] = pair;
        proposal = D.checkRecommendation(proposal, info);
        if (proposal === null)
            return null;
        const { topResult, } = proposal;
        // reset the action to null if the agent explicitly asks to "learn more"
        if (action === null)
            return { hasLearnMore: true, topResult, info, action: null };
        return D.checkActionForRecommendation(proposal, action);
    };
}

// recommendations following a user confirm state
system_confirmed_recommendation = {
    ctx:ctx_confirm ('would you like to' | 'would you like me to') action:contextual_action_phrase [weight=0.1]
        => D.makeActionRecommendation(ctx, action);
}

recommendation_accept_phrase_with_action = {
    accept_phrase generic_preamble_for_action action:coref_action_command => action;
}

recommendation_accept_phrase_by_name = {
    name:generic_list_proposal_accept_phrase => [name, null];
    name:list_proposal_accept_phrase_must_have_action => [name, null];
    accept:list_proposal_accept_phrase_with_action => accept;
}

recommendation_related_question_pair = {
    prop:system_recommendation '<sep>'  => [prop, question];
}
