// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

// import thingpedia info
const _tpLoader = require('../load-thingpedia');
}

// an empty string for the table
who_complete_table = {
    thingpedia_who_question if complete;
}


who_with_filtered_table = {
    // no filter
    !always_filter who_complete_table;

    // one filter
    who_one_with_filter_table;
    who_one_which_filter_table;
    who_one_clean_filter_table;

    // two filters
    who_two_with_filter_table;
    who_two_which_filter_table;
    who_two_clean_filter_table;
}

who_one_with_filter_table = {}
who_one_which_filter_table = {}
who_one_clean_filter_table = {}
who_two_with_filter_table = {}
who_two_which_filter_table = {}
who_two_clean_filter_table = {}

if (!_tpLoader.flags.nofilter) {
    who_one_with_filter_table = {
        table:thingpedia_who_question ('with' | 'having') filter:with_filter => C.addFilter(table, filter);
        table:thingpedia_who_question ('with' | 'having') filter:npp_filter => C.addFilter(table, filter);
    }

    who_one_which_filter_table = {
        table:thingpedia_who_question ('which' | 'that') ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:thingpedia_who_question ('which' | 'that') filter:avp_filter => C.addFilter(table, filter);
        table:thingpedia_who_question ('which' | 'that') ('is' | 'are') filter:apv_filter => C.addFilter(table, filter);
        table:thingpedia_who_question ('which' | 'that') ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);
    }

    who_one_clean_filter_table = {
        table:thingpedia_who_question filter:pvp_filter => C.addFilter(table, filter);
    }

    who_two_with_filter_table = {
        table:who_one_with_filter_table 'and' filter:with_filter => C.addFilter(table, filter);
        table:who_one_which_filter_table ('and having' | 'and with' | ', with') filter:with_filter => C.addFilter(table, filter);
        table:who_one_clean_filter_table ('with' | 'having') filter:with_filter => C.addFilter(table, filter);

        table:who_one_with_filter_table 'and' filter:npp_filter => C.addFilter(table, filter);
        table:who_one_which_filter_table ('and having' | 'and with' | ', with') filter:npp_filter => C.addFilter(table, filter);
        table:who_one_clean_filter_table ('with' | 'having') filter:npp_filter => C.addFilter(table, filter);
    }

    who_two_which_filter_table = {
        table:who_one_with_filter_table ('which' | 'that') ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_one_with_filter_table ('which' | 'that') filter:avp_filter => C.addFilter(table, filter);
        table:who_one_with_filter_table ('which' | 'that') ('is' | 'are') filter:apv_filter => C.addFilter(table, filter);
        table:who_one_with_filter_table ('which' | 'that') ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);

        table:who_one_which_filter_table 'and' ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_one_which_filter_table 'and' filter:avp_filter => C.addFilter(table, filter);
        table:who_one_which_filter_table 'and' ('is' | 'are') filter:apv_filter => C.addFilter(table, filter);
        table:who_one_which_filter_table 'and' ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);

        table:who_one_clean_filter_table ('which' | 'that') ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_one_clean_filter_table ('which' | 'that') filter:avp_filter => C.addFilter(table, filter);
        table:who_one_clean_filter_table ('which' | 'that') ('is' | 'are') filter:apv_filter => C.addFilter(table, filter);
        table:who_one_clean_filter_table ('which' | 'that') ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);
    }
}


who_verb_filtered_table = {
    // one filter
    who_one_be_filter_table;
    who_one_have_filter_table;
    who_one_verb_filter_table;

    // two filters
    who_two_be_filter_table;
    who_two_have_filter_table;
    who_two_verb_filter_table;
}

who_one_be_filter_table = {}
who_one_have_filter_table = {}
who_one_verb_filter_table = {}
who_two_be_filter_table = {}
who_two_have_filter_table = {}
who_two_verb_filter_table = {}
whose_filtered_table = {}

if (!_tpLoader.flags.nofilter) {
    who_one_be_filter_table = {
        ?turking table:who_complete_table ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_complete_table ('is' | 'are') filter:pvp_filter => C.addFilter(table, filter);
        table:who_complete_table ('is' | 'are') filter:apv_filter  => C.addFilter(table, filter);
        ?turking table:who_complete_table ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);

        !turking table:who_complete_table ('is' | 'are') ('' | 'a' | 'the' | 'an') filter:npi_filter => C.addFilter(table, filter);
        !turking table:who_complete_table ('is' | 'are') ('' | 'a' | 'the' | 'an') filter:npv_filter => C.addFilter(table, filter);
    }

    who_one_have_filter_table = {
        table:who_complete_table ('get' | 'have' | 'gets' | 'has') filter:with_filter => C.addFilter(table, filter);
        table:who_complete_table ('get' | 'have' | 'gets' | 'has') filter:npp_filter => C.addFilter(table, filter);
    }

    who_one_verb_filter_table = {
        table:who_complete_table filter:avp_filter => C.addFilter(table, filter);
    }

    who_two_be_filter_table = {
        table:who_one_be_filter_table 'and' filter:npi_filter => C.addFilter(table, filter);
        table:who_one_be_filter_table 'and' filter:pvp_filter => C.addFilter(table, filter);
        table:who_one_be_filter_table 'and' filter:apv_filter  => C.addFilter(table, filter);
        table:who_one_be_filter_table 'and' filter:npv_filter => C.addFilter(table, filter);

        table:who_one_have_filter_table 'and' ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' ('is' | 'are') filter:pvp_filter => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' ('is' | 'are') filter:apv_filter  => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);

        table:who_one_verb_filter_table 'and' ('is' | 'are') filter:npi_filter => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' ('is' | 'are') filter:pvp_filter => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' ('is' | 'are') filter:apv_filter  => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' ('is' | 'are') filter:npv_filter => C.addFilter(table, filter);
    }

    who_two_have_filter_table = {
        table:who_one_be_filter_table 'and' ('get' | 'have' | 'gets' | 'has') filter:with_filter => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' filter:with_filter => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' ('get' | 'have' | 'gets' | 'has') filter:with_filter => C.addFilter(table, filter);

        table:who_one_be_filter_table 'and' ('get' | 'have' | 'gets' | 'has') filter:npp_filter => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' filter:npp_filter => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' ('get' | 'have' | 'gets' | 'has') filter:npp_filter => C.addFilter(table, filter);
    }

    who_two_verb_filter_table = {
        table:who_one_be_filter_table 'and' filter:avp_filter => C.addFilter(table, filter);
        table:who_one_have_filter_table 'and' filter:avp_filter => C.addFilter(table, filter);
        table:who_one_verb_filter_table 'and' filter:avp_filter => C.addFilter(table, filter);
    }

    whose_filtered_table = {
        table:who_complete_table filter:whose_npp_filter => C.addFilter(table, filter);
    }

}
