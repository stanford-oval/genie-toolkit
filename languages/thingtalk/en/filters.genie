// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
//         Giovanni Campagna <gcampagn@cs.stanford.edu>

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

const _tpLoader = require('../load-thingpedia');

const HERE = new Ast.Value.Location(new Ast.Location.Relative('current_location'));
}

// generic filters (npp)
get_predicate_filter = {
    'before' t1:constant_Time => C.timeGetPredicate(null, t1);
    'after' t2:constant_Time  => C.timeGetPredicate(t2, null);
    'between' t1:constant_Time 'and' t2:constant_Time => C.timeGetPredicate(t1, t2);

    'my location is' loc:constant_Location     => C.locationGetPredicate(loc);
    'my location is not' loc:constant_Location => C.locationGetPredicate(loc, true);
    'i am at' loc:constant_Location            => C.locationGetPredicate(loc);
    'i am not at' loc:constant_Location        => C.locationGetPredicate(loc, true);

    proj:projection_Any ('is' | 'is exactly' | 'is equal to') x:constant_Any        => C.makeGetPredicate(proj, '==', x);
    proj:projection_Any ('is not' | 'is n\'t' | 'is different than') x:constant_Any => C.makeGetPredicate(proj, '==', x, true);
}

if_filter = {
    get_predicate_filter;

    'the' p:out_param_Any ('is' | 'is exactly' | 'is equal to') x:constant_Any        => {
        if (x.getType().isString)
            return C.makeFilter(p, '=~', x);
        else
            return C.makeFilter(p, '==', x);
    };
    'the' p:out_param_Any ('is not' | 'is n\'t' | 'is different than') x:constant_Any => {
        if (x.getType().isString)
            return C.makeFilter(p, '=~', x, true);
        else
            return C.makeFilter(p, '==', x, true);
    };

    //p:the_out_param_Numeric 'is' ('greater' | 'higher' | 'bigger' | 'more' | 'at least' | 'not less than') x:constant_Numeric => C.makeFilter(p, '>=', x);
    //p:the_out_param_Numeric 'is' ('smaller' | 'lower' | 'less' | 'at most' | 'not more than') x:constant_Numeric             => C.makeFilter(p, '<=', x);

    p:out_param_Number 'is' ('greater than' | 'higher than' | 'larger than' | 'more than' | 'at least' | 'not less than') x:constant_Number => C.makeFilter(p, '>=', x);
    p:out_param_Number 'is' ('smaller than' | 'lower than' | 'less than' | 'at most' | 'not more than') x:constant_Number  => C.makeFilter(p, '<=', x);

    p:out_param_Currency 'is' ('more expensive' | 'more costly' | 'more') 'than' x:constant_Currency => C.makeFilter(p, '>=', x);
    p:out_param_Currency 'is' ('less expensive' | 'cheaper' | 'less') 'than' x:constant_Currency  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_ms 'is' ('longer than' | 'no shorter than') x:constant_Measure_ms => C.makeFilter(p, '>=', x);
    p:out_param_Measure_ms 'is' ('no longer than' | 'shorter than') x:constant_Measure_ms  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_byte 'is' ('larger' | 'more' | 'no smaller'| 'no less') 'than' x:constant_Measure_byte => C.makeFilter(p, '>=', x);
    p:out_param_Measure_byte 'is' ('smaller' | 'less' | 'no larger' | 'no more') 'than' x:constant_Measure_byte  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_kg 'is' ('heavier' | 'larger') 'than' x:constant_Measure_kg => C.makeFilter(p, '>=', x);
    p:out_param_Measure_kg 'is' ('lighter' | 'smaller') 'than' x:constant_Measure_kg  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_C 'is' ('hotter' | 'higher') 'than' x:constant_Measure_C => C.makeFilter(p, '>=', x);
    p:out_param_Measure_C 'is' ('cooler' | 'colder' | 'lower') 'than' x:constant_Measure_C  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_m 'is' ('farther' | 'more distant' | 'longer') 'than' x:constant_Measure_m => C.makeFilter(p, '>=', x);
    p:out_param_Measure_m 'is' ('nearer' | 'closer' | 'shorter' | 'no longer' | 'no farther') 'than' x:constant_Measure_m  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_mps 'is' ('faster' | 'quicker' | 'speedier') 'than' x:constant_Measure_mps => C.makeFilter(p, '>=', x);
    p:out_param_Measure_mps 'is' ('slower' | 'more slowly') 'than' x:constant_Measure_mps  => C.makeFilter(p, '<=', x);

    !turking {
        p:out_param_Date 'is' ('after' | 'later than') x:constant_Date => C.makeFilter(p, '>=', x);
        p:out_param_Date 'is' ('before' | 'earlier than' | 'sooner than') x:constant_Date => C.makeFilter(p, '<=', x);
        p:out_param_Time 'is' ('after' | 'later than') x:constant_Time => C.makeFilter(p, '>=', x);
        p:out_param_Time 'is' ('before' | 'earlier than' | 'sooner than') x:constant_Time => C.makeFilter(p, '<=', x);
    }

    // there are too few arrays, so keep both
    p:the_out_param_Array__Any 'contain' x:constant_Any => C.makeFilter(p, 'contains', x);
    p:the_out_param_Array__Any 'do not contain' x:constant_Any => C.makeFilter(p, 'contains', x, true);
    p:the_out_param_Array__Any 'include' x:constant_Any => C.makeFilter(p, 'contains', x);
    p:the_out_param_Array__Any 'do not include' x:constant_Any => C.makeFilter(p, 'contains', x, true);

    p:the_out_param_String ('contains' | 'includes') x:constant_String => C.makeFilter(p, '=~', x);
    p:the_out_param_String 'does not' ('contain' | 'include') x:constant_String => C.makeFilter(p, '=~', x, true);
    x:constant_String 'is in' p:the_out_param_String => C.makeFilter(p, '=~', x);

    !turking {
        ?range_filters range_filter;
    }
    //!turking f:either_filter => f;
}

edge_filter = {
    !turking 'the' p:out_param_Any ('becomes' | 'becomes equal to') x:constant_Any => C.makeFilter(p, '==', x);

    //p:the_out_param_Numeric ('is now greater than' | 'becomes greater than' | 'becomes higher than' | 'goes above' | 'increases above' | 'goes over' | 'rises above') x:constant_Numeric => C.makeFilter(p, '>=', x);
    //p:the_out_param_Numeric ('is now smaller than' | 'becomes smaller than' | 'becomes lower than' | 'goes below' | 'decreases below' | 'goes under') x:constant_Numeric => C.makeFilter(p, '<=', x);

    p:out_param_Number ('is now' | 'becomes' | 'goes') ('greater than' | 'higher than' | 'larger than' | 'more than' | 'at least' | 'not less than') x:constant_Number => C.makeFilter(p, '>=', x);
    p:out_param_Number ('is now' | 'becomes' | 'goes') ('smaller than' | 'lower than' | 'less than' | 'at most' | 'not more than') x:constant_Number  => C.makeFilter(p, '<=', x);

    p:out_param_Currency ('is now' | 'becomes' | 'goes') ('more expensive' | 'more costly' | 'more') 'than' x:constant_Currency => C.makeFilter(p, '>=', x);
    p:out_param_Currency ('is now' | 'becomes' | 'goes') ('less expensive' | 'cheaper' | 'less') 'than' x:constant_Currency  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_ms ('is now' | 'becomes' | 'goes') 'longer than' x:constant_Measure_ms => C.makeFilter(p, '>=', x);
    p:out_param_Measure_ms ('is now' | 'becomes' | 'goes') 'shorter than' x:constant_Measure_ms  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_byte ('is now' | 'becomes' | 'goes') ('larger' | 'more') 'than' x:constant_Measure_byte => C.makeFilter(p, '>=', x);
    p:out_param_Measure_byte ('is now' | 'becomes' | 'goes') ('smaller' | 'less') 'than' x:constant_Measure_byte  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_kg ('is now' | 'becomes' | 'goes') ('heavier' | 'larger') 'than' x:constant_Measure_kg => C.makeFilter(p, '>=', x);
    p:out_param_Measure_kg ('is now' | 'becomes' | 'goes') ('lighter' | 'smaller') 'than' x:constant_Measure_kg  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_C ('is now' | 'becomes' | 'goes') ('hotter' | 'higher') 'than' x:constant_Measure_C => C.makeFilter(p, '>=', x);
    p:out_param_Measure_C ('is now' | 'becomes' | 'goes') ('cooler' | 'colder' | 'lower') 'than' x:constant_Measure_C  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_m ('is now' | 'becomes' | 'goes') ('farther' | 'more distant' | 'longer') 'than' x:constant_Measure_m => C.makeFilter(p, '>=', x);
    p:out_param_Measure_m ('is now' | 'becomes' | 'goes') ('nearer' | 'closer' | 'shorter') 'than' x:constant_Measure_m  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_mps ('is now' | 'becomes' | 'goes') ('faster' | 'quicker' | 'speedier') 'than' x:constant_Measure_mps => C.makeFilter(p, '>=', x);
    p:out_param_Measure_mps ('is now' | 'becomes' | 'goes') ('slower' | 'more slowly') 'than' x:constant_Measure_mps  => C.makeFilter(p, '<=', x);

    p:out_param_Date ('is now' | 'becomes' | 'goes') ('after' | 'later than') x:constant_Date => C.makeFilter(p, '>=', x);
    p:out_param_Date ('is now' | 'becomes' | 'goes') ('before' | 'earlier than' | 'sooner than') x:constant_Date => C.makeFilter(p, '<=', x);
    p:out_param_Time ('is now' | 'becomes' | 'goes') ('after' | 'later than') x:constant_Time => C.makeFilter(p, '>=', x);
    p:out_param_Time ('is now' | 'becomes' | 'goes') ('before' | 'earlier than' | 'sooner than') x:constant_Time => C.makeFilter(p, '<=', x);
}

either_filter = {
    'the' param:out_param_Any ('is' | 'is equal to' | 'is one of' | 'is either') v1:constant_Any 'or' v2:constant_Any => {
        // param is a Value.VarRef
        //console.log('param: ' + param.name);
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        let vtype = v1.getType();
        if (vtype.isBoolean) // "is equal to true or false" does not make sense
            return null;
        return C.makeFilter(param, 'in_array', new Ast.Value.Array([v1, v2]));
    };
    'the' param:out_param_Any 'is' ('not' | 'neither') v1:constant_Any 'nor' v2:constant_Any => {
        // param is a Value.VarRef
        //console.log('param: ' + param.name);
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        let vtype = v1.getType();
        if (vtype.isBoolean) // "is neither true nor false" does not make sense
            return null;
        return C.makeFilter(param, 'in_array', new Ast.Value.Array([v1, v2]), true);
    };
}

range = {
    'between' v1:constant_Numeric 'and' v2:constant_Numeric => {
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        return [v1, v2];
    };
    'in the range from' v1:constant_Numeric 'to' v2:constant_Numeric => {
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        return [v1, v2];
    };
}
range_filter = {
    param:the_out_param_Numeric 'is' range:range => {
        const [v1, v2] = range;
        const f1 = C.makeFilter(param, '>=', v1);
        const f2 = C.makeFilter(param, '<=', v2);
        return f1 && f2 ? new Ast.BooleanExpression.And(null, [f1, f2]) : null;
    };
}

with_filter = {
    p:out_param_Any 'equal to' x:constant_Any => C.makeFilter(p, '==', x);
    !turking p:out_param_String ('containing' | 'including') x:constant_String => C.makeFilter(p, '=~', x);
    !turking x:constant_String ('in the' | 'in its' | 'in their') p:out_param_String => C.makeFilter(p, '=~', x);
    ?schema_org p:out_param_String ('being' | 'containing' ) x:constant_String => C.makeFilter(p, '=~', x);
    ?schema_org x:constant_String ('as' | 'in the' ) p:out_param_String => C.makeFilter(p, '=~', x);

    // context reference filters
    p:out_param_String 'equal to' x:constant_String_ContextRef => C.makeFilter(p, '=~', x);
    !turking p:out_param_String ('containing' | 'including') x:constant_String_ContextRef => C.makeFilter(p, '=~', x);
    !turking x:constant_String_ContextRef ('in the' | 'in its' | 'in their') p:out_param_String => C.makeFilter(p, '=~', x);
    ?schema_org p:out_param_String ('being' | 'containing' ) x:constant_String_ContextRef => C.makeFilter(p, '=~', x);
    ?schema_org x:constant_String_ContextRef ('as' | 'in the' ) p:out_param_String => C.makeFilter(p, '=~', x);

    // substring and
    !turking p:out_param_String 'containing both' x:constant_String 'and' y:constant_String => C.makeAndFilter(p, '=~', [x, y]);
    !turking p:the_out_param_String 'containing neither' x:constant_String 'nor' y:constant_String => C.makeAndFilter(p, '=~', [x, y], true);
    !turking 'both' x:constant_String 'and' y:constant_String 'in' p:the_out_param_String => C.makeAndFilter(p, '=~', [x, y]);

    // substring or
    !turking p:the_out_param_String 'containing either' x:constant_String 'or' y:constant_String => C.makeOrFilter(p, '=~', [x, y]);
    !turking 'either' x:constant_String 'or' y:constant_String 'in' p:the_out_param_String => C.makeOrFilter(p, '=~', [x, y]);

    // substring but
    !turking p:the_out_param_String ('containing' | 'including') x:constant_String ('but not'| 'without' | 'but no') y:constant_String => C.makeButFilter(p, '=~', [x, y]);

    //p:out_param_Numeric ('higher' | 'larger' | 'bigger') 'than' x:constant_Numeric => C.makeFilter(p, '>=', x);
    //p:out_param_Numeric ('smaller' | 'lower') 'than' x:constant_Numeric => C.makeFilter(p, '<=', x);
    p:out_param_Number ('greater than' | 'higher than' | 'larger than' | 'more than' | 'at least' | 'not less than') x:constant_Number => C.makeFilter(p, '>=', x);
    p:out_param_Number ('smaller than' | 'lower than' | 'less than' | 'at most' | 'not more than') x:constant_Number  => C.makeFilter(p, '<=', x);
    x:constant_Number ('or more' | 'or higher' | 'or greater' | 'or above') p:out_param_Number => C.makeFilter(p, '>=', x);
    x:constant_Number ('or less' | 'or lower' | 'or below') p:out_param_Number => C.makeFilter(p, '<=', x);
    !turking 'over' x:constant_Number p:out_param_Number => C.makeFilter(p, '>=', x);

    p:out_param_Currency ('more expensive' | 'more costly' | 'more') 'than' x:constant_Currency => C.makeFilter(p, '>=', x);
    p:out_param_Currency ('less expensive' | 'cheaper' | 'less') 'than' x:constant_Currency  => C.makeFilter(p, '<=', x);
    x:constant_Currency ('or more' | 'or above') p:out_param_Currency => C.makeFilter(p, '>=', x);
    x:constant_Currency ('or less' | 'or cheaper' | 'or below') p:out_param_Currency => C.makeFilter(p, '<=', x);

    p:out_param_Measure_ms 'longer than' x:constant_Measure_ms => C.makeFilter(p, '>=', x);
    p:out_param_Measure_ms 'shorter than' x:constant_Measure_ms  => C.makeFilter(p, '<=', x);
    x:constant_Measure_ms ('or longer' | 'or more' ) p:out_param_Measure_ms => C.makeFilter(p, '>=', x);
    x:constant_Measure_ms ('or shorter' | 'or less' ) p:out_param_Measure_ms => C.makeFilter(p, '<=', x);

    p:out_param_Measure_byte ('larger' | 'more') 'than' x:constant_Measure_byte => C.makeFilter(p, '>=', x);
    p:out_param_Measure_byte ('smaller' | 'less') 'than' x:constant_Measure_byte  => C.makeFilter(p, '<=', x);
    x:constant_Measure_byte ('or larger' | 'or more' ) p:out_param_Measure_byte => C.makeFilter(p, '>=', x);
    x:constant_Measure_byte ('or smaller' | 'or less' ) p:out_param_Measure_byte => C.makeFilter(p, '<=', x);

    p:out_param_Measure_kg ('heavier' | 'larger') 'than' x:constant_Measure_kg => C.makeFilter(p, '>=', x);
    p:out_param_Measure_kg ('lighter' | 'smaller') 'than' x:constant_Measure_kg  => C.makeFilter(p, '<=', x);
    x:constant_Measure_kg 'or more'  p:out_param_Measure_kg => C.makeFilter(p, '>=', x);
    x:constant_Measure_kg 'or less' p:out_param_Measure_kg => C.makeFilter(p, '<=', x);
    !turking 'over' x:constant_Measure_kg p:out_param_Measure_kg => C.makeFilter(p, '>=', x);

    p:out_param_Measure_C ('hotter' | 'higher') 'than' x:constant_Measure_C => C.makeFilter(p, '>=', x);
    p:out_param_Measure_C ('cooler' | 'colder' | 'lower') 'than' x:constant_Measure_C  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_m ('farther' | 'more distant' | 'longer') 'than' x:constant_Measure_m => C.makeFilter(p, '>=', x);
    p:out_param_Measure_m ('nearer' | 'closer' | 'shorter') 'than' x:constant_Measure_m  => C.makeFilter(p, '<=', x);

    p:out_param_Measure_mps ('faster' | 'quicker' | 'speedier') 'than' x:constant_Measure_mps => C.makeFilter(p, '>=', x);
    p:out_param_Measure_mps ('slower' | 'more slowly') 'than' x:constant_Measure_mps  => C.makeFilter(p, '<=', x);

    p:out_param_Date ('after' | 'later than') x:constant_Date => C.makeFilter(p, '>=', x);
    p:out_param_Date ('before' | 'earlier than' | 'sooner than') x:constant_Date => C.makeFilter(p, '<=', x);
    p:out_param_Time ('after' | 'later than') x:constant_Time => C.makeFilter(p, '>=', x);
    p:out_param_Time ('before' | 'earlier than' | 'sooner than') x:constant_Time => C.makeFilter(p, '<=', x);

    //('higher' | 'larger' | 'bigger') p:out_param_Numeric 'than' x:constant_Numeric => C.makeFilter(p, '>=', x);
    //('smaller' | 'lower') p:out_param_Numeric 'than' x:constant_Numeric => C.makeFilter(p, '<=', x);
    ('greater' | 'higher' | 'larger' | 'more' ) p:out_param_Number 'than' x:constant_Number => C.makeFilter(p, '>=', x);
    ('smaller' | 'lower' | 'less') p:out_param_Number 'than' x:constant_Number  => C.makeFilter(p, '<=', x);

    ('more expensive' | 'more costly' | 'more') p:out_param_Currency 'than' x:constant_Currency => C.makeFilter(p, '>=', x);
    ('less expensive' | 'cheaper' | 'less') p:out_param_Currency 'than' x:constant_Currency  => C.makeFilter(p, '<=', x);

    'longer' p:out_param_Measure_ms 'than' x:constant_Measure_ms => C.makeFilter(p, '>=', x);
    'shorter' p:out_param_Measure_ms 'than' x:constant_Measure_ms  => C.makeFilter(p, '<=', x);

    ('larger' | 'more') p:out_param_Measure_byte 'than' x:constant_Measure_byte => C.makeFilter(p, '>=', x);
    ('smaller' | 'less') p:out_param_Measure_byte 'than' x:constant_Measure_byte  => C.makeFilter(p, '<=', x);

    ('heavier' | 'larger') p:out_param_Measure_kg 'than' x:constant_Measure_kg => C.makeFilter(p, '>=', x);
    ('lighter' | 'smaller') p:out_param_Measure_kg 'than' x:constant_Measure_kg  => C.makeFilter(p, '<=', x);

    ('hotter' | 'higher') p:out_param_Measure_C 'than' x:constant_Measure_C => C.makeFilter(p, '>=', x);
    ('cooler' | 'colder' | 'lower') p:out_param_Measure_C 'than' x:constant_Measure_C  => C.makeFilter(p, '<=', x);

    ('farther' | 'more distant' | 'longer') p:out_param_Measure_m 'than' x:constant_Measure_m => C.makeFilter(p, '>=', x);
    ('nearer' | 'closer' | 'shorter') p:out_param_Measure_m 'than' x:constant_Measure_m  => C.makeFilter(p, '<=', x);

    ('faster' | 'quicker' | 'speedier') p:out_param_Measure_mps 'than' x:constant_Measure_mps => C.makeFilter(p, '>=', x);
    ('slower' | 'more slowly') p:out_param_Measure_mps 'than' x:constant_Measure_mps  => C.makeFilter(p, '<=', x);

    'later' p:out_param_Date 'than' x:constant_Date => C.makeFilter(p, '>=', x);
    ('earlier' | 'sooner') p:out_param_Date 'than' x:constant_Date => C.makeFilter(p, '<=', x);
    'later' p:out_param_Time 'than' x:constant_Time => C.makeFilter(p, '>=', x);
    ('earlier' | 'sooner') p:out_param_Time 'than' x:constant_Time => C.makeFilter(p, '<=', x);

    !turking {
        ?range_filters f:range_with_filter => f;
        'no' param:out_param_Number => C.makeFilter(param, '==', new Ast.Value.Number(0));
        'zero' param:out_param_Number => C.makeFilter(param, '==', new Ast.Value.Number(0));
    }

    // array
    // there are too few arrays, so keep both
    p:out_param_Array__Any 'containing' x:constant_Any => C.makeFilter(p, 'contains', x);
    p:out_param_Array__Any 'containing no' x:constant_Any => C.makeFilter(p, 'contains', x, true);
    x:constant_Any 'in' p:the_out_param_Array__Any => C.makeFilter(p, 'contains', x);

    // array contain and
    !turking p:out_param_Array__Any 'containing both' x:constant_Any 'and' y:constant_Any => C.makeAndFilter(p, 'contains', [x, y]);
    !turking 'both' x:constant_Any 'and' y:constant_Any 'in' p:the_out_param_Array__Any => C.makeAndFilter(p, 'contains', [x, y]);

    // array contain or
    p:out_param_Array__Any 'containing either' x:constant_Any 'or' y:constant_Any => C.makeOrFilter(p, 'contains', [x, y]);
    'either' x:constant_Any 'or' y:constant_Any 'in' p:the_out_param_Array__Any => C.makeOrFilter(p, 'contains', [x, y]);

    // array but
    !turking p:out_param_String ('containing' | 'including') x:constant_String ('but not'| 'without' | 'but no') y:constant_String => C.makeButFilter(p, 'contains', [x, y]);

    // aggregate filters - count
    !turking ('no' | 'zero') p:out_param_Array__Any => C.makeAggregateFilter(p, 'count', '*', '==', new Ast.Value.Number(0));
    x:constant_Number p:out_param_Array__Any => C.makeAggregateFilter(p, 'count', '*', '==', x);

    !turking ('no' | 'zero') p:out_param_ArrayCount => C.makeFilter(p, '==', new Ast.Value.Number(0));
    x:constant_Number p:out_param_ArrayCount => C.makeFilter(p, '==', x);

    !turking ('no' | 'zero') p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('lower than' | 'below') x:constant_Numeric => {
        const filter =  C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '==', new Ast.Value.Number(0));
    };
    !turking ('no' | 'zero') p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('greater than' | 'above') x:constant_Numeric => {
        const filter = C.makeFilter(f, '>=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '==', new Ast.Value.Number(0));
    };

    p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('greater than' | 'above') x:constant_Numeric => {
        const filter = C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '>=', new Ast.Value.Number(1));

    };

    p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('lower than' | 'below') x:constant_Numeric => {
        const filter = C.makeFilter(f, '>=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '>=', new Ast.Value.Number(1));
    };

    p:out_param_Array__Compound ('with' | 'having') f:with_filter => {
        return C.makeAggregateFilterWithFilter(p, f, 'count', '*', '>=', new Ast.Value.Number(1));
    };

    v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('greater than' | 'above') x:constant_Numeric => {
        const filter = C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '==', v);
    };

    ('more than' | 'at least' | 'no fewer than') x:constant_Number p:out_param_Array__Any => C.makeAggregateFilter(p, 'count', '*', '>=', x);
    ('fewer than' | 'at most' | 'no more than') x:constant_Number p:out_param_Array__Any => C.makeAggregateFilter(p, 'count', '*', '<=', x);
    ('more than' | 'at least' | 'no fewer than') x:constant_Number p:out_param_ArrayCount => C.makeFilter(p, '>=', x);
    ('fewer than' | 'at most' | 'no more than') x:constant_Number p:out_param_ArrayCount => C.makeFilter(p, '<=', x);

    // do not merge
    'no more than' v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('lower than' | 'below') x:constant_Numeric => {
        const filter = C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '<=', v);
    };
    'at most' v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('lower than' | 'below') x:constant_Numeric => {
        const filter = C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '<=', v);
    };
    'fewer than' v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('lower than' | 'below') x:constant_Numeric => {
        const filter = C.makeFilter(f, '<=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '<=', v);
    };

    // do not merge
    'more than' v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('greater than' | 'above') x:constant_Numeric => {
        const filter = C.makeFilter(f, '>=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '>=', v);
    };
    'at least' v:constant_Number p:out_param_Array__Compound ('with' | 'having') f:out_param_Numeric ('greater than' | 'above') x:constant_Numeric => {
        const filter = C.makeFilter(f, '>=', x);
        return C.makeAggregateFilterWithFilter(p, filter, 'count', '*', '>=', v);
    };

    // aggregate filters - sum
    ('total' | 'sum') p:out_param_Array__Numeric ('of' | 'being' ) x:constant_Numeric => C.makeAggregateFilter(p, 'sum', null, '==', x);
    ('total' | 'sum') p:out_param_Array__Numeric ('greater than' | 'more than' | 'above' ) x:constant_Numeric => C.makeAggregateFilter(p, 'sum', null, '>=', x);
    ('total' | 'sum') p:out_param_Array__Numeric ('lower than' | 'less than' | 'below' ) x:constant_Numeric => C.makeAggregateFilter(p, 'sum', null, '<=', x);

    !turking ('total' | 'sum') f:out_param_Numeric 'of' p:out_param_Array__Compound ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(p, 'sum', f, '==', x);
    !turking ('total' | 'sum') f:out_param_Numeric 'of' p:out_param_Array__Compound ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(p, 'sum', f, '>=', x);
    !turking ('total' | 'sum') f:out_param_Numeric 'of' p:out_param_Array__Compound ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(p, 'sum', f, '>=', x);

    // aggregate filters - avg
    'average' p:out_param_Array__Numeric ('of' | 'being' ) x:constant_Numeric => C.makeAggregateFilter(p, 'avg', null, '==', x);
    'average' p:out_param_Array__Numeric ('greater than' | 'more than' | 'above') x:constant_Numeric => C.makeAggregateFilter(p, 'avg', null, '>=', x);
    'average' p:out_param_Array__Numeric ('lower than' | 'less than' | 'below') x:constant_Numeric => C.makeAggregateFilter(p, 'avg', null, '<=', x);

    !turking 'average' f:out_param_Numeric 'of' p:out_param_Array__Compound ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(p, 'avg', f, '==', x);
    !turking 'average' f:out_param_Numeric 'of' p:out_param_Array__Compound ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(p, 'avg', f, '>=', x);
    !turking 'average' f:out_param_Numeric 'of' p:out_param_Array__Compound ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(p, 'avg', f, '>=', x);

    // aggregate filters - max
    ('maximum' | 'highest') p:out_param_Array__Numeric ('of' | 'being' ) x:constant_Numeric => C.makeAggregateFilter(p, 'max', null, '==', x);
    ('maximum' | 'highest') p:out_param_Array__Numeric ('greater than' | 'more than' | 'above') x:constant_Numeric => C.makeAggregateFilter(p, 'max', null, '>=', x);
    ('maximum' | 'highest') p:out_param_Array__Numeric ('lower than' | 'less than' | 'below') x:constant_Numeric => C.makeAggregateFilter(p, 'max', null, '<=', x);

    !turking ('maximum' | 'highest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(p, 'max', f, '==', x);
    !turking ('maximum' | 'highest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(p, 'max', f, '>=', x);
    !turking ('maximum' | 'highest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(p, 'max', f, '>=', x);

    // aggregate filters - min
    ('minimum' | 'lowest') p:out_param_Array__Numeric ('of' | 'being' ) x:constant_Numeric => C.makeAggregateFilter(p, 'min', null, '==', x);
    ('minimum' | 'lowest') p:out_param_Array__Numeric ('greater than' | 'more than' | 'above') x:constant_Numeric => C.makeAggregateFilter(p, 'min', null, '>=', x);
    ('minimum' | 'lowest') p:out_param_Array__Numeric ('lower than' | 'less than' | 'below') x:constant_Numeric => C.makeAggregateFilter(p, 'min', null, '<=', x);

    !turking ('minimum' | 'lowest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(p, 'min', f, '==', x);
    !turking ('minimum' | 'lowest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(p, 'min', f, '>=', x);
    !turking ('minimum' | 'lowest') f:out_param_Numeric 'of' p:out_param_Array__Compound ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(p, 'min', f, '>=', x);
}

for (let pname in _tpLoader.compoundArrays) {
    for (let fname in _tpLoader.compoundArrays[pname].fields) {
        if (_tpLoader.compoundArrays[pname].fields[fname].type.isNumeric()) {
            with_filter = {
                ('total' | 'sum') f:out_param_Numeric ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'sum', f, '==', x);
                ('total' | 'sum') f:out_param_Numeric ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'sum', f, '>=', x);
                ('total' | 'sum') f:out_param_Numeric ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'sum', f, '>=', x);

                'average' f:out_param_Numeric ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'avg', f, '==', x);
                'average' f:out_param_Numeric ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'avg', f, '>=', x);
                'average' f:out_param_Numeric ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'avg', f, '>=', x);

                ('maximum' | 'highest') f:out_param_Numeric ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'max', f, '==', x);
                ('maximum' | 'highest') f:out_param_Numeric ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'max', f, '>=', x);
                ('maximum' | 'highest') f:out_param_Numeric ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'max', f, '>=', x);

                ('minimum' | 'lowest') f:out_param_Numeric ('of' | 'being') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'min', f, '==', x);
                ('minimum' | 'lowest') f:out_param_Numeric ('greater than' | 'more than' | 'higher than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'min', f, '>=', x);
                ('minimum' | 'lowest') f:out_param_Numeric ('smaller than' | 'less than' | 'lower than') x:constant_Numeric => C.makeAggregateFilter(new Ast.Value.VarRef(pname), 'min', f, '>=', x);
            }
        }
    }
}


range_with_filter = {
    param:out_param_Numeric range:range => {
        const [v1, v2] = range;
        const f1 = C.makeFilter(param, '>=', v1);
        const f2 = C.makeFilter(param, '<=', v2);
        return f1 && f2 ? new Ast.BooleanExpression.And(null, [f1, f2]) : null;
    };
}

// add the "both" prefix that is used by auto-generated *_filters
both_prefix = {
    'both';
}

preposition_filter = {
    ('here' | 'around here' | 'near here') => C.makeFilter(new Ast.Value.VarRef('geo'), '==', HERE);
    ('nearby' | 'around me' | 'in this area') => C.makeFilter(new Ast.Value.VarRef('geo'), '==', HERE);
    ('in' | 'around' | 'near') x:constant_Location=> C.makeFilter(new Ast.Value.VarRef('geo'), '==', x);
}

// filters on npp parameter for "whose" question
// e.g.: whose nickname is boogie?
whose_npp_filter = {
    p:out_param_Any 'is' x:constant_Any => C.makeFilter(p, '==', x);
    p:out_param_Any 'is' x:constant_Any => C.makeFilter(p, 'contains', x);
}


//FIXME: calculate threshold using max rating instead of a fixed number
quality_filter = {
    ('good' | 'great' | 'nice' | 'decent') => C.makeFilter(new Ast.Value.VarRef('aggregateRating.ratingValue'), '>=', new Ast.Value.Number(4));
}
