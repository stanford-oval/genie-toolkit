// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');
const _tpLoader = require('../load-thingpedia');
const HERE = new Ast.Value.Location(new Ast.Location.Relative('current_location'));

}

import './constants';
import '../common';
import '../common-constants';

table = thingpedia_query if complete;

filter = {
    'whose' p:out_param_Any 'is' v:constant_Any => C.makeFilter(p, v.getType().isString ? '=~' : '==', v);
    'whose' p:out_param_Any 'is not' v:constant_Any =>  C.makeFilter(p, v.getType().isString ? '=~' : '==', v, true);
    'whose' p:out_param_Array__Any 'is' v:constant_Any => C.makeFilter(p, 'contains', v);
    'whose' p:out_param_Array__Any 'is not' v:constant_Any =>  C.makeFilter(p, 'contains', v, true);
    'whose' p:out_param_Numeric ('is samller than' | 'at most') v:constant_Numeric => C.makeFilter(p, '<=', v);
    'whose' p:out_param_Numeric ('is larger than' | 'at least')  v:constant_Numeric => C.makeFilter(p, '>=', v);

    'that' p:out_param_avp v:constant_Any =>  C.makeFilter(p, v.getType().isString ? '=~' : '==', v);
    'that not' p:out_param_avp v:constant_Any => C.makeFilter(p, v.getType().isString ? '=~' : '==', v, true);
    'that' p:out_param_avp v:constant_Any =>  C.makeFilter(p, 'contains', v);
    'that not' p:out_param_avp v:constant_Any => C.makeFilter(p, 'contains', v, true);

    'that has' v:constant_Number p:out_param_Any => C.makeAggregateFilter(p, 'count', '*', '==', v);
    'that has' ('less than' | 'at most') v:constant_Number p:out_param_Any => C.makeAggregateFilter(p, 'count', '*', '<=', v);
    'that has' ('more than' | 'at least') v:constant_Number p:out_param_Any => C.makeAggregateFilter(p, 'count', '*', '>=', v);
}

filtered_table = {
    t:table f:filter => C.addFilter(t, f);
    t:filtered_table 'and' f:filter => C.addFilter(t, f);

    // noun reverse
    ( t1:table 'that is' p:out_param_Any 'of' t2:table
    | t1:table 'that is' p:out_param_Any 'of' t2:filtered_table
    | t1:table 'that is' p:out_param_Array__Any 'of' t2:table
    | t1:table 'that is' p:out_param_Array__Any 'of' t2:filtered_table) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name);
    };
    ( t1:table 'that is not' p:out_param_Any 'of' t2:table
    | t1:table 'that is not' p:out_param_Any 'of' t2:filtered_table
    | t1:table 'that is not' p:out_param_Array__Any 'of' t2:table
    | t1:table 'that is not' p:out_param_Array__Any 'of' t2:filtered_table
    ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, true);
    };

    // verb reverse
    ( t1:table 'that' t2:table p:out_param_avp
    | t1:table 'that' t2:filtered_table 'and' p:out_param_avp ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name);
    };
    ( t1:table 'that' t2:table 'not' p:out_param_avp
    | t1:table 'that' t2:filtered_table 'and not' p:out_param_avp ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, true);
    };

    // arg minmax
    ( table:table 'that has the smallest' p:out_param_Numeric
    | table:filtered_table 'that has the smallest' p:out_param_Numeric ) => C.makeArgMaxMinTable(table, p, 'asc', 1);
    ( table:table 'that has the largest' p:out_param_Numeric
    | table:filtered_table 'that has the largest' p:out_param_Numeric ) => C.makeArgMaxMinTable(table, p, 'desc', 1);

    // arg minmax on count
    ( table:table 'that has the least number of' p:out_param_Array__Any
    | table:filtered_table 'that has the least number of' p:out_param_Array__Any ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return C.makeArgMaxMinTable(table, conflictParam, 'asc');
        return C.makeAggComputeArgMinMaxExpression(table, 'count', null, p, Type.Number, 'desc');
    };
    ( table:table 'that has the most number of' p:out_param_Array__Any
    | table:filtered_table 'that has the most number of' p:out_param_Array__Any ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return C.makeArgMaxMinTable(table, conflictParam, 'desc');
        return C.makeAggComputeArgMinMaxExpression(table, 'count', null, p, Type.Number, 'desc');
    };

    // projection
    ( p:out_param_Any 'of' table:table
    | p:out_param_Any 'of' table:filtered_table
    | p:out_param_Array__Any 'of' table:table
    | p:out_param_Array__Any 'of' table:filtered_table ) => {
        const name = p.name;
        if (_tpLoader.flags.schema_org) {
            if (name === 'id')
                return null;
        }
        if (!table.schema.out[name])
            return null;

        if (name === 'picture_url' && _tpLoader.flags.turking)
            return null;
        const newSchema = table.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === name);
        return new Ast.Table.Projection(null, table, [name], newSchema);
    };

    // count
    ( 'number of' table:table
    | 'number of' table:filtered_table ) => {
        if (!table.schema.is_list)
            return null;
        const newSchema = table.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT)
            .addArguments([new Ast.ArgumentDef(null, Ast.ArgDirection.OUT, 'count', Type.Number)]);
        const agg = new Ast.Table.Aggregation(null, table, '*', 'count', null, newSchema);
        return new Ast.Table.Projection(null, agg, ['count'], newSchema);
    };

    // sum & avg
    ( 'total' p:out_param_Numeric 'of' t:table
    | 'total' p:out_param_Numeric 'of' t:filtered_table ) => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(null, t, p.name, 'sum', null, newSchema);
        return new Ast.Table.Projection(null, agg, [p.name], newSchema);
    };
    ( 'average' p:out_param_Numeric 'of' t:table
    | 'average' p:out_param_Numeric 'of' t:filtered_table ) => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(null, t, p.name, 'avg', null, newSchema);
        return new Ast.Table.Projection(null, agg, [p.name], newSchema);
    };
}


$root = {
    t:table => {
        const proj = C.sayProjection(t);
        if (proj)
            return C.makeProgram(proj);
        return null;
    };
    t:filtered_table => {
        const filtered = C.sayProjection(t);
        if (filtered)
            return C.makeProgram(filtered);
        return null;
    };
}
