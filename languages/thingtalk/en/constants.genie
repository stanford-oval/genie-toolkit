// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

import assert from 'assert';
import { Ast, Type } from 'thingtalk';

import * as C from '../ast_manip';
import ThingpediaLoader from '../load-thingpedia';

constant_Number : Ast.NumberValue = {
    // `turking` is a flags that controls a group of grammar rules
    // syntax is ?flag to enable the rule (or group of rules) only if the flag is set, !flag to disable the
    // rule if the flag is set

    !inference {
        !turking {
        'zero' => new Ast.Value.Number(0);
        'one'  => new Ast.Value.Number(1);
        /*'two'  => new Ast.Value.Number(2);
        'three'  => new Ast.Value.Number(3);
        'four'  => new Ast.Value.Number(4);
        'five'  => new Ast.Value.Number(5);
        'six'  => new Ast.Value.Number(6);
        'seven'  => new Ast.Value.Number(7);
        'eight'  => new Ast.Value.Number(8);
        'nine'  => new Ast.Value.Number(9);
        'ten'  => new Ast.Value.Number(10);
        'eleven'  => new Ast.Value.Number(11);
        'twelve'  => new Ast.Value.Number(12);*/
        }
    }
}

constant_date_point : Ast.Value = {
    'now'                 => C.makeDate(null, '+', null);
    'today'               => C.makeDate(new Ast.DateEdge('start_of', 'day'), '+', null);
    'yesterday'           => C.makeDate(new Ast.DateEdge('start_of', 'day'), '-', new Ast.Value.Measure(1, 'day'));

    !turking {
        ?future_dates {
            'tomorrow'            => C.makeDate(new Ast.DateEdge('end_of', 'day'), '+', null);
            'the end of the day'  => C.makeDate(new Ast.DateEdge('end_of', 'day'), '+', null);
            'the end of the week' => C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null);
            'the end of the month'=> C.makeDate(new Ast.DateEdge('end_of', 'mon'), '+', null);
            'the end of the year' => C.makeDate(new Ast.DateEdge('end_of', 'year'), '+', null);
            'the end of the decade' => C.makeDate(new Ast.DateEdge('end_of', 'decade'), '+', null);
            'the end of the century' => C.makeDate(new Ast.DateEdge('end_of', 'century'), '+', null);
        }
    }
}

constant_date_range : [Ast.Value, Ast.Value] = {
    'this week'   => [C.makeDate(new Ast.DateEdge('start_of', 'week'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null)];
    'this month'  => [C.makeDate(new Ast.DateEdge('start_of', 'mon'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'mon'), '+', null)];
    'this year'   => [C.makeDate(new Ast.DateEdge('start_of', 'year'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'year'), '+', null)];
    'this decade'   => [C.makeDate(new Ast.DateEdge('start_of', 'decade'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'decade'), '+', null)];
    'this century'   => [C.makeDate(new Ast.DateEdge('start_of', 'century'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'century'), '+', null)];

    !turking {
        'last week'  => [C.makeDate(new Ast.DateEdge('start_of', 'week'), '-', new Ast.Value.Measure(1, 'week')), C.makeDate(new Ast.DateEdge('start_of', 'week'), '+', null)];
        'last month' => [C.makeDate(new Ast.DateEdge('start_of', 'mon'), '-', new Ast.Value.Measure(1, 'mon')), C.makeDate(new Ast.DateEdge('start_of', 'mon'), '+', null)];
        'last year'  => [C.makeDate(new Ast.DateEdge('start_of', 'year'), '-', new Ast.Value.Measure(1, 'year')), C.makeDate(new Ast.DateEdge('start_of', 'year'), '+', null)];
        'last decade'  => [C.makeDate(new Ast.DateEdge('start_of', 'decade'), '-', new Ast.Value.Measure(1, 'decade')), C.makeDate(new Ast.DateEdge('start_of', 'decade'), '+', null)];
        'last century'  => [C.makeDate(new Ast.DateEdge('start_of', 'century'), '-', new Ast.Value.Measure(1, 'century')), C.makeDate(new Ast.DateEdge('start_of', 'century'), '+', null)];

        ?future_dates {
            'next week'  => [C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', new Ast.Value.Measure(1, 'week'))];
            'next month' => [C.makeDate(new Ast.DateEdge('end_of', 'mon'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'mon'), '+', new Ast.Value.Measure(1, 'mon'))];
            'next year'  => [C.makeDate(new Ast.DateEdge('end_of', 'year'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'year'), '+', new Ast.Value.Measure(1, 'year'))];
            'next decade'  => [C.makeDate(new Ast.DateEdge('end_of', 'decade'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'decade'), '+', new Ast.Value.Measure(1, 'decade'))];
            'next century'  => [C.makeDate(new Ast.DateEdge('end_of', 'century'), '+', null), C.makeDate(new Ast.DateEdge('end_of', 'century'), '+', new Ast.Value.Measure(1, 'century'))];
        }

        // year
        year:constant_Number => {
            if (year.value <= 0)
                return null;
            return [
                C.makeDate(new Date(C.fixTwoYearNumber(year.value), 0), '+', null),
                C.makeDate(new Date(C.fixTwoYearNumber(year.value), 0), '+', new Ast.Value.Measure(1, 'year'))
            ];
        };
        year:constant_Number 's' => {
            if (year.value <= 0)
                return null;
            return [
                C.makeDate(new Date(C.fixTwoYearNumber(year.value), 0), '+', null),
                C.makeDate(new Date(C.fixTwoYearNumber(year.value), 0), '+', new Ast.Value.Measure(10, 'year'))
            ];
        };
    }

    // months
    ('jan' | 'january') => C.makeMonthDateRange(null, 1);
    ('jan' | 'january') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 1);
    ('feb' | 'february') => C.makeMonthDateRange(null, 2);
    ('feb' | 'february') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 2);
    ('mar' | 'march') => C.makeMonthDateRange(null, 3);
    ('mar' | 'march') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 3);
    ('apr' | 'april') => C.makeMonthDateRange(null, 4);
    ('apr' | 'april') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 4);
    'may' => C.makeMonthDateRange(null, 5);
    'may of' year:constant_Number => C.makeMonthDateRange(year.value, 5);
    ('jun' | 'june') => C.makeMonthDateRange(null, 6);
    ('jun' | 'june') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 6);
    ('jul' | 'july') => C.makeMonthDateRange(null, 7);
    ('jul' | 'july') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 7);
    ('aug' | 'august') => C.makeMonthDateRange(null, 8);
    ('aug' | 'august') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 8);
    ('sep' | 'sept' | 'september') => C.makeMonthDateRange(null, 9);
    ('sep' | 'sept' | 'september') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 9);
    ('oct' | 'october') => C.makeMonthDateRange(null, 10);
    ('oct' | 'october') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 10);
    ('nov' | 'november') => C.makeMonthDateRange(null, 11);
    ('nov' | 'november') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 11);
    ('dec' | 'december') => C.makeMonthDateRange(null, 12);
    ('dec' | 'december') 'of' year:constant_Number => C.makeMonthDateRange(year.value, 12);
}

constant_day_of_week : Ast.Value = {
    // weekdays
    ('mon' | 'monday') => C.makeDate(new Ast.WeekDayDate('monday', null), '+', null);
    'last' ('mon' | 'monday') => C.makeDate(new Ast.WeekDayDate('monday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('mon' | 'monday') => C.makeDate(new Ast.WeekDayDate('monday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('tue' | 'tuesday') => C.makeDate(new Ast.WeekDayDate('tuesday', null), '+', null);
    'last' ('tue' | 'tuesday') => C.makeDate(new Ast.WeekDayDate('tuesday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('tue' | 'tuesday') => C.makeDate(new Ast.WeekDayDate('tuesday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('wed' | 'wednesday') => C.makeDate(new Ast.WeekDayDate('wednesday', null), '+', null);
    'last' ('wed' | 'wednesday') => C.makeDate(new Ast.WeekDayDate('wednesday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('wed' | 'wednesday') => C.makeDate(new Ast.WeekDayDate('wednesday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('thu' | 'thursday') => C.makeDate(new Ast.WeekDayDate('thursday', null), '+', null);
    'last' ('thu' | 'thursday') => C.makeDate(new Ast.WeekDayDate('thursday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('thu' | 'thursday') => C.makeDate(new Ast.WeekDayDate('thursday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('fri' | 'friday') => C.makeDate(new Ast.WeekDayDate('friday', null), '+', null);
    'last' ('fri' | 'friday') => C.makeDate(new Ast.WeekDayDate('friday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('fri' | 'friday') => C.makeDate(new Ast.WeekDayDate('friday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('sat' | 'saturday') => C.makeDate(new Ast.WeekDayDate('saturday', null), '+', null);
    'last' ('sat' | 'saturday') => C.makeDate(new Ast.WeekDayDate('saturday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('sat' | 'saturday') => C.makeDate(new Ast.WeekDayDate('saturday', null), '+', new Ast.Value.Measure(1, 'week'));
    ('sun' | 'sunday') => C.makeDate(new Ast.WeekDayDate('sunday', null), '+', null);
    'last' ('sun' | 'sunday') => C.makeDate(new Ast.WeekDayDate('sunday', null), '-', new Ast.Value.Measure(1, 'week'));
    'next' ('sun' | 'sunday') => C.makeDate(new Ast.WeekDayDate('sunday', null), '+', new Ast.Value.Measure(1, 'week'));
}

constant_Date : Ast.Value = {
    !inference {
        constant_date_point;
        constant_day_of_week;

        !turking {
            duration:constant_Measure_ms 'ago'      => C.makeDate(null, '-', duration);
            duration:constant_Measure_ms 'before' pt:constant_date_point => C.makeDate(pt, '-', duration);

            ?future_dates {
                duration:constant_Measure_ms 'from now' => C.makeDate(null, '+', duration);
                duration:constant_Measure_ms 'after' pt:constant_date_point  => C.makeDate(pt, '+', duration);
            }
        }
    }
}



constant_Measure_ms : Ast.Value = {
    !inference {
        !turking num:constant_Number 'ms' => C.addUnit('ms', num);
        !turking num:constant_Number 'milliseconds' => C.addUnit('ms', num);
        !turking num:constant_Number 's' => C.addUnit('s', num);
        !turking num:constant_Number 'seconds' => C.addUnit('s', num);
        num:constant_Number 'min' => C.addUnit('min', num);
        num:constant_Number 'minutes' => C.addUnit('min', num);
        num:constant_Number 'h' => C.addUnit('h', num);
        num:constant_Number 'hours' => C.addUnit('h', num);
        num:constant_Number 'days' => C.addUnit('day', num);
        !turking num:constant_Number 'weeks' => C.addUnit('week', num);
        !turking num:constant_Number 'months' => C.addUnit('mon', num);
        !turking num:constant_Number 'years' => C.addUnit('year', num);
        !turking num:constant_Number 'decades' => C.addUnit('decade', num);
        !turking num:constant_Number 'centuries' => C.addUnit('century', num);

    }
}

constant_Measure_byte : Ast.Value = {
    !inference {
        !turking num:constant_Number 'byte' => C.addUnit('byte', num);
        num:constant_Number 'kb' => C.addUnit('KB', num);
        num:constant_Number 'mb' => C.addUnit('MB', num);
        num:constant_Number 'gb' => C.addUnit('GB', num);
        num:constant_Number 'tb' => C.addUnit('TB', num);
        num:constant_Number 'kilobytes' => C.addUnit('KB', num);
        num:constant_Number 'megabytes' => C.addUnit('MB', num);
        num:constant_Number 'gigabytes' => C.addUnit('GB', num);
        num:constant_Number 'terabytes' => C.addUnit('TB', num);
    }
}

constant_Measure_kg : Ast.Value = {
    !inference {
        !turking num:constant_Number 'grams' => C.addUnit('g', num);
        num:constant_Number 'kilograms' => C.addUnit('kg', num);
        num:constant_Number 'kg' => C.addUnit('kg', num);
        num:constant_Number 'pounds' => C.addUnit('lb', num);
        num:constant_Number 'lbs' => C.addUnit('lb', num);
        num:constant_Number 'ounces' => C.addUnit('oz', num);
        num:constant_Number 'oz' => C.addUnit('oz', num);
    }
}

constant_Measure_C : Ast.Value = {
    !inference {
        !turking {
            num:constant_Number 'c' => C.addUnit('C', num);
            num:constant_Number 'centigrade' => C.addUnit('C', num);
            num:constant_Number 'celsius' => C.addUnit('C', num);
            num:constant_Number 'degrees celsius' => C.addUnit('C', num);
        }
        num:constant_Number 'f' => C.addUnit('F', num);
        num:constant_Number 'fahrenheit' => C.addUnit('F', num);
        num:constant_Number 'degrees fahrenheit' => C.addUnit('F', num);
        num:constant_Number 'degrees' => C.addUnit('defaultTemperature', num);
    }
}

constant_Measure_m : Ast.Value = {
    !inference {
        !turking num:constant_Number 'm' => C.addUnit('m', num);
        num:constant_Number 'meters' => C.addUnit('m', num);
        num:constant_Number 'km' => C.addUnit('km', num);
        num:constant_Number 'kilometers' => C.addUnit('km', num);
        num:constant_Number 'mi' => C.addUnit('mi', num);
        num:constant_Number 'miles' => C.addUnit('mi', num);
        num:constant_Number 'ft' => C.addUnit('ft', num);
        num:constant_Number 'in' => C.addUnit('in', num);
        num:constant_Number 'inches' => C.addUnit('in', num);
        num:constant_Number 'cm' => C.addUnit('cm', num);
        num:constant_Number 'ly' => C.addUnit('ly', num);
        num:constant_Number 'light-years' => C.addUnit('ly', num);
    }
}

constant_Measure_m2 : Ast.Value = {
    !inference {
        num:constant_Number 'square meters' => C.addUnit('m2', num);
        num:constant_Number 'square km' => C.addUnit('km2', num);
        num:constant_Number 'square kilometers' => C.addUnit('km2', num);
        num:constant_Number 'square ft' => C.addUnit('ft2', num);
        num:constant_Number 'square feet' => C.addUnit('ft2', num);
    }
}

constant_Measure_m3 : Ast.Value = {
    !inference {
        num:constant_Number 'cubic meters' => C.addUnit('m3', num);
        num:constant_Number 'cubic km' => C.addUnit('km3', num);
        num:constant_Number 'cubic kilometers' => C.addUnit('km3', num);
        num:constant_Number 'cubic ft' => C.addUnit('ft3', num);
        num:constant_Number 'cubic feet' => C.addUnit('ft3', num);
        num:constant_Number 'liter' => C.addUnit('l', num);
        num:constant_Number 'l' => C.addUnit('l', num);
        num:constant_Number 'cl' => C.addUnit('cl', num);
        num:constant_Number 'hl' => C.addUnit('hl', num);
        num:constant_Number 'ml' => C.addUnit('ml', num);
        num:constant_Number 'floz' => C.addUnit('floz', num);
        num:constant_Number 'gallon' => C.addUnit('gal', num);
        num:constant_Number 'quart' => C.addUnit('qt', num);
        num:constant_Number 'pint' => C.addUnit('pint', num);
        num:constant_Number 'cup' => C.addUnit('cup', num);
        num:constant_Number 'teaspoon' => C.addUnit('tsp', num);
        num:constant_Number 'tablespoon' => C.addUnit('tbsp', num);
    }
}

constant_Measure_mps : Ast.Value = {
    !inference {
        num:constant_Number 'mph' => C.addUnit('mph', num);
        !turking num:constant_Number 'm/s' => C.addUnit('mps', num);
        num:constant_Number 'kph' => C.addUnit('kmph', num);
        num:constant_Number 'miles per hour' => C.addUnit('mph', num);
        num:constant_Number 'kilometers per hour' => C.addUnit('kmph', num);
        num:constant_Number 'km/h' => C.addUnit('kmph', num);
    }
}

constant_Measure_W : Ast.Value = {
    !inference {
        num:constant_Number 'w' => C.addUnit('W', num);
        num:constant_Number 'watt' => C.addUnit('W', num);
        num:constant_Number 'kw' => C.addUnit('kW', num);
        num:constant_Number 'kilowatt' => C.addUnit('W', num);
    }
}
constant_Measure_lx : Ast.Value = {
    !inference {
        num:constant_Number 'lx' => C.addUnit('lx', num);
    }
}
constant_Measure_lm : Ast.Value = {
    !inference {
        num:constant_Number 'lm' => C.addUnit('lm', num);
    }
}
constant_Measure_dB : Ast.Value = {
    !inference {
        num:constant_Number 'db' => C.addUnit('dB', num);
        num:constant_Number 'decibels' => C.addUnit('dB', num);
    }
}
constant_Measure_dBm : Ast.Value = {
    !inference {
        num:constant_Number 'dbm' => C.addUnit('dBm', num);
    }
}

constant_Location : Ast.LocationValue = {
    !inference {
        'here'                    => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
        !turking 'where i am now' => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
        'the area'                => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
        'the city'                => new Ast.Value.Location(new Ast.Location.Relative('current_location'));

        'home'                    => new Ast.Value.Location(new Ast.Location.Relative('home'));
        'my home'                 => new Ast.Value.Location(new Ast.Location.Relative('home'));
        'my neighborhood'         => new Ast.Value.Location(new Ast.Location.Relative('home'));

        'work'                    => new Ast.Value.Location(new Ast.Location.Relative('work'));
        'my office'               => new Ast.Value.Location(new Ast.Location.Relative('work'));
        'my workplace'            => new Ast.Value.Location(new Ast.Location.Relative('work'));
    }
}

constant_pairs : [Ast.Value, Ast.Value] = {
    c1:constant_Any 'and' c2:constant_Any with { type = c1.type } => {
        assert(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    };
}
constant_or_pairs : [Ast.Value, Ast.Value] = {
    c1:constant_Any 'or' c2:constant_Any with { type = c1.type } => {
        assert(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    };
}
constant_nor_pairs : [Ast.Value, Ast.Value] = {
    c1:constant_Any 'nor' c2:constant_Any with { type = c1.type } => {
        assert(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    };
}

// ContextRef is not a constant, it needs special templates
// e.g., if this is `constant_String`, then we will generate:
// $cuisine restaurant -> "this"/"the selection on the screen" restaurant
constant_String_ContextRef : Ast.ContextRefValue = {
    ?screen_selection ( 'this'
    | 'the selection on the screen'
    ) => new Ast.Value.ContextRef('selection', Type.String);
}
