// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>, Jian Li <jianli19@cs.stanford.edu>

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');
}

constant_Number = {
    // `turking` is a flags that controls a group of grammar rules
    // syntax is ?flag to enable the rule (or group of rules) only if the flag is set, !flag to disable the
    // rule if the flag is set

    !turking {
    '0'    => new Ast.Value.Number(0);
    '零' => new Ast.Value.Number(0);
    '1'    => new Ast.Value.Number(1);
    '一'  => new Ast.Value.Number(1);
    }
}

constant_date_point = {
    '现在'             => C.makeDate(null, '+', null);
    '今天'             => C.makeDate(new Ast.DateEdge('start_of', 'day'), '+', null);
    '昨天'             => C.makeDate(new Ast.DateEdge('start_of', 'day'), '-', new Ast.Value.Measure(1, 'day'));
    '这 星期'          => C.makeDate(new Ast.DateEdge('start_of', 'week'), '+', null);
    '这周'             => C.makeDate(new Ast.DateEdge('start_of', 'week'), '+', null);
    '这 礼拜'          => C.makeDate(new Ast.DateEdge('start_of', 'week'), '+', null);

    !turking {
    '明天'             => C.makeDate(new Ast.DateEdge('end_of', 'day'), '+', null);
    '今天 以后'         => C.makeDate(new Ast.DateEdge('end_of', 'day'), '+', null);
    '这 星期 以后'      => C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null);
    '这周 以后'         => C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null);
    '这 礼拜 以后'      => C.makeDate(new Ast.DateEdge('end_of', 'week'), '+', null);
    '上 星期'           => C.makeDate(new Ast.DateEdge('start_of', 'week'), '-', new Ast.Value.Measure(1, 'week'));
    '上周'             => C.makeDate(new Ast.DateEdge('start_of', 'week'), '-', new Ast.Value.Measure(1, 'week'));
    '上 礼拜'           => C.makeDate(new Ast.DateEdge('start_of', 'week'), '-', new Ast.Value.Measure(1, 'week'));
    '这个 月'           => C.makeDate(new Ast.DateEdge('start_of', 'mon'), '+', null);
    '今年'             => C.makeDate(new Ast.DateEdge('start_of', 'year'), '+', null);
    '下个 月'           => C.makeDate(new Ast.DateEdge('end_of', 'mon'), '+', null);
    '明年'             => C.makeDate(new Ast.DateEdge('end_of', 'year'), '+', null);
    '上个 月'           => C.makeDate(new Ast.DateEdge('end_of', 'mon'), '-', new Ast.Value.Measure(1, 'mon'));
    '去年'             => C.makeDate(new Ast.DateEdge('end_of', 'year'), '-', new Ast.Value.Measure(1, 'year'));
    }
}

constant_Date = {
    !turking {
    duration:constant_Measure_ms '以后' => C.makeDate(null, '+', duration);
    duration:constant_Measure_ms '之后' => C.makeDate(null, '+', duration);
    duration:constant_Measure_ms '以前' => C.makeDate(null, '-', duration);
    duration:constant_Measure_ms '之前' => C.makeDateDate(null, '-', duration);
    '在' pt:constant_date_point '以后' duration:constant_Measure_ms => C.makeDate(pt.value, '+', duration);
    '在' pt:constant_date_point '之后' duration:constant_Measure_ms => C.makeDate(pt.value, '+', duration);
    '在' pt:constant_date_point '以前' duration:constant_Measure_ms => C.makeDate(pt.value, '-', duration);
    '在' pt:constant_date_point '之前' duration:constant_Measure_ms => C.makeDate(pt.value, '-', duration);
    }
}

constant_Measure_byte = {
    !turking num:constant_Number 'byte' => C.addUnit('byte', num);
    num:constant_Number 'kb' => C.addUnit('KB', num);
    num:constant_Number 'mb' => C.addUnit('MB', num);
    num:constant_Number 'gb' => C.addUnit('GB', num);
    num:constant_Number 'tb' => C.addUnit('TB', num);
}

constant_Measure_kg = {
    !turking num:constant_Number '克' => C.addUnit('g', num);
    num:constant_Number '公斤' => C.addUnit('kg', num);
    num:constant_Number '千克' => C.addUnit('kg', num);
    num:constant_Number '磅'   => C.addUnit('lb', num);
    num:constant_Number '盎司' => C.addUnit('oz', num);
}

constant_Measure_C = {
    !turking {
        num:constant_Number 'c' => C.addUnit('C', num);
        num:constant_Number '摄氏' => C.addUnit('C', num);
    }
    num:constant_Number 'f' => C.addUnit('F', num);
    num:constant_Number '华氏' => C.addUnit('F', num);
}

constant_Measure_m = {
    !turking num:constant_Number '米' => C.addUnit('m', num);
    num:constant_Number '公尺' => C.addUnit('m', num);
    num:constant_Number '公里' => C.addUnit('km', num);
    num:constant_Number '千米' => C.addUnit('km', num);
    num:constant_Number '英里' => C.addUnit('mi', num);
    num:constant_Number '迈' => C.addUnit('mi', num);
    num:constant_Number '英尺' => C.addUnit('ft', num);
    num:constant_Number '英寸' => C.addUnit('in', num);
    num:constant_Number '公分' => C.addUnit('cm', num);
    num:constant_Number '厘米' => C.addUnit('cm', num);
}

constant_Measure_mps = {
    !turking num:constant_Number '米 每秒' => C.addUnit('mps', num);
    num:constant_Number '英里 每 小时' => C.addUnit('mph', num);
    num:constant_Number '公里 每 小时' => C.addUnit('kmph', num);
    num:constant_Number 'km/h' => C.addUnit('kmph', num);
}

constant_Location = {
    '这里'                    => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
    !turking '我的 当下 位置' => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
    '家里'                    => new Ast.Value.Location(new Ast.Location.Relative('home'));
    '办公室'                  => new Ast.Value.Location(new Ast.Location.Relative('work'));
}

